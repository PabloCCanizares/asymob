{
  "stats": {
    "suites": 1,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-14T21:35:38.719Z",
    "end": "2023-11-14T21:36:24.061Z",
    "duration": 45342,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d804d3ed-cd52-4d52-95d0-795bd510110d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 52,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "6eb4e0b6-a477-4ffc-a79c-a61a98a91aa3",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "cf2e39e4-6a93-4620-afb5-28d8b1520252",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "2365fdf5-c539-4800-a9e8-5dfd7751ad68",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "f5120087-0bb2-48f7-ac52-b007c79a52e4",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "TC-Hours-convo/HOURS_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L1",
              "timedOut": false,
              "duration": 1677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: When do you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5e8a9f08-f6c8-446d-b137-0751f5434eff",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Hours-convo/HOURS_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L2",
              "timedOut": false,
              "duration": 1484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: What are your hours?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0451aeaa-da22-4d17-aecd-6b2b4ff15410",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Hours-convo/HOURS_USER-L3",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L3",
              "timedOut": false,
              "duration": 1298,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: How late are you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "aecdee89-57da-4ad7-b06f-658d0c378341",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3881,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0a3f5011-d51d-4796-a37d-987234e8cd4a",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3966,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7bbe9e41-39f1-44db-8fd9-8b405e2b76a5",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3730,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "35675c2e-739d-475d-a0b7-9959845bcfde",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "358934df-36a1-4d2c-96f2-3076f25b5e56",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2997,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ce50625-4de2-4ff9-89f4-e8e6bb853fab",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3393,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "46404ff7-4605-4d14-81d4-1f739691cb86",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ccb0f388-4cc4-4800-90b4-75304505bbae",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3311,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cc4b228b-bc44-40d4-8afa-a2925678b904",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f1cd6368-dbe1-4777-8fdc-2db48f0cee7e",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "07b54fa4-40c8-45cb-a709-6221072ec30a",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4f4d7155-55a1-45e8-aea5-39d4d108f156",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1732,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0c144bac-7a42-488b-89b2-425ace4dba75",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1758,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d75206f2-ca5f-4960-9ee4-6618f0fea935",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1792,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0a28fb87-027a-4c2d-9a0c-1cd12eb13055",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Welcome_Intent-convo/WELCOME_INTENT_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Welcome_Intent-convo/WELCOME_INTENT_USER-L1",
              "timedOut": false,
              "duration": 918,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: Hi, welcome to Hogarth's bike shop.  How can I help you?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "da7c5e03-c187-4293-87ba-e4ddea5d4f95",
              "parentUUID": "054e317e-1c37-4ccf-b6f5-654a37ecbd7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e8a9f08-f6c8-446d-b137-0751f5434eff",
            "0451aeaa-da22-4d17-aecd-6b2b4ff15410",
            "aecdee89-57da-4ad7-b06f-658d0c378341",
            "0a3f5011-d51d-4796-a37d-987234e8cd4a",
            "7bbe9e41-39f1-44db-8fd9-8b405e2b76a5",
            "35675c2e-739d-475d-a0b7-9959845bcfde",
            "358934df-36a1-4d2c-96f2-3076f25b5e56",
            "7ce50625-4de2-4ff9-89f4-e8e6bb853fab",
            "46404ff7-4605-4d14-81d4-1f739691cb86",
            "ccb0f388-4cc4-4800-90b4-75304505bbae",
            "cc4b228b-bc44-40d4-8afa-a2925678b904",
            "f1cd6368-dbe1-4777-8fdc-2db48f0cee7e",
            "07b54fa4-40c8-45cb-a709-6221072ec30a",
            "4f4d7155-55a1-45e8-aea5-39d4d108f156",
            "0c144bac-7a42-488b-89b2-425ace4dba75",
            "d75206f2-ca5f-4960-9ee4-6618f0fea935",
            "0a28fb87-027a-4c2d-9a0c-1cd12eb13055",
            "da7c5e03-c187-4293-87ba-e4ddea5d4f95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45070,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}