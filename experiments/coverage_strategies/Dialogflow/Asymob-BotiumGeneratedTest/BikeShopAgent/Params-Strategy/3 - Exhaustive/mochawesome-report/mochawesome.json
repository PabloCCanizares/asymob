{
  "stats": {
    "suites": 1,
    "tests": 620,
    "passes": 620,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-14T19:00:06.366Z",
    "end": "2023-11-14T19:22:04.749Z",
    "duration": 1318383,
    "testsRegistered": 620,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1ed050a2-bc57-4d5a-8b3f-5b568dd3ea48",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "554c2673-1c53-4731-96d1-51ca8240194b",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "913750c3-8da7-448c-a5eb-2575553a937a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "fc60a64e-ab5e-4ad8-a648-e76e54bba313",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "67472e97-7e7e-450d-9c89-9aafb691ed74",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "85e5d0af-d178-472c-95f1-fb22478c4b67",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "TC-Hours-convo/HOURS_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L1",
              "timedOut": false,
              "duration": 1281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: When do you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f5d7fcf4-e27b-4c1b-b610-2076bfc91875",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Hours-convo/HOURS_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L2",
              "timedOut": false,
              "duration": 956,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: What are your hours?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d98012c-0853-4897-af0b-307024df7eb6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Hours-convo/HOURS_USER-L3",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L3",
              "timedOut": false,
              "duration": 611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: How late are you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "90693578-e096-4810-84a3-1fcdaf58af6d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5495d857-4629-4abd-8eab-4dfd35ab5a68",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c2a269d8-aaa3-4441-8bcf-80e8657dc301",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6667f7d9-8af3-4230-85fe-4a14d7f22bb8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "970ef941-063c-4e71-a600-0fb97f83089c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3059,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bcdc200b-4328-484d-991c-faf4b8e0f0ad",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3432,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "75bfac14-aec8-4baf-98d6-380952f2e655",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "909fe13d-7801-48f0-8c06-21452c5eb209",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "44cdb712-e5c1-40d9-9239-9596bb43440f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c1ff7885-f09d-40c3-b6e7-d1a38f43dd57",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d7303d79-a102-4361-85eb-5bf07045b276",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1e4edca4-961d-4410-9af1-c1199bcd4e7d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "807ca65e-c67b-4c6a-bed3-d361917a1495",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e88d30d-bb00-485b-948c-6ea9fca3274a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0c239e3a-1c6d-4fea-b70a-fede05558035",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3290,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c3ac677b-4c47-4441-97ad-57b95219491f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ff1a0cd0-5b8e-4d21-ade2-7f29adf7a5b1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9ce356e6-c0f2-49d4-8a57-e957fbbf59cd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3025,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6c8bb16e-c7d9-4e63-ad04-5d7920a8c8a9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3048,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "729383d6-0223-4b9a-b9da-7ca4c6aafd99",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c548707b-bd1d-420b-a134-eded4292641e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2876,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "06a2466f-fb56-48cc-bee9-4b38fe41193c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "55abc335-e646-42ee-b858-d2e37bd749fb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2815,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "56231fa4-44e7-4920-b22f-244d591b00ca",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "85d4c4a4-914f-4973-8f7e-f6bb0ae7b723",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4e478597-e9d5-4fec-a805-5068390efb7f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "14de2efb-05ac-48d1-92bf-33da5b6a7e5f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3048,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dc570c3b-d92f-4f52-9425-d4cb90a2d895",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2942,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1e2fdb57-6889-43bf-9e7e-f40ed9a973f4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2944,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6e61632c-da8a-4a23-99ad-45b4f5105d22",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4ae1c9f7-4b7a-45a2-b0db-08c6dc3c9258",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "602e0e94-8478-4277-bd19-3ad7986c3069",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2426,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f740c545-a309-4a44-ba33-7b0d2419c336",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2958,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dd468901-2c88-48a1-88fc-5bfe70e806f9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3045,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "220ef044-9837-471d-8a3f-ab1a02ed1990",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "88b8e6f9-18a1-4987-9eb1-6f9fad400415",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "221f68da-3dd3-4984-b42f-ae60a44fd2ae",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e3f6577c-8c6d-41af-8c5c-7cbc734eb175",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0c35feaf-8b58-4721-b357-7b24fe5deade",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "64ed735c-8fe7-460e-a239-f02a9925f676",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2739,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "61a6a426-685a-4736-959e-215d70318eba",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3087,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "089b20da-9fa9-496d-80f4-c1d30cd6933d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c29dbdf-8e65-440e-aef1-22d59a638560",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1238cc94-6a17-4426-bce8-3211f740eed4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c145a771-5659-43b5-bf84-a735e3e6a005",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "735cb760-db68-45a4-b964-4c075937acb2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5de30e1c-0223-4434-9dc5-357e854d34c2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "32ae8455-a553-4386-8afe-2babf7934e3a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c8f1fa14-25fe-485e-836c-e51ec933b6b2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2724,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8c2e86a9-14f8-4fc4-bcb0-5587adda41ec",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3ad6df05-51bb-4250-82ae-0cda9869da17",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3660,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "768d81d2-fc65-434c-b087-f5f9e8ad9464",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "173a929f-840d-4328-a0fa-ca145e4e0e84",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2886,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8b9c7197-9933-4b21-ab17-cdb6632e64b6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cd2a6f96-7740-4322-8759-1da0674ee8b5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c78b1a54-a929-4e6e-b952-73cafbf9b7de",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8664e526-f269-4153-894d-6f9261e20295",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5d23342a-e8fb-470e-9795-665870c90ac5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2941,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6381ad60-47a7-4b5c-abdb-3a6decb97aaa",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2986,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3a776bff-24f4-4d28-bb82-884ce93e7abd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2812,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5cf2eb62-bd61-4e53-a9a5-984a976f9980",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3074,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7369c1b4-92ec-4fe1-b5a2-0c5f43ef0cc2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "483edd1a-4d06-43e9-bcaf-34b513b050b5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2666,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "db5c929b-c069-4922-9182-5e0024930545",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "060e51f7-21e8-43e2-989b-ea19ac0962f4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b299cb74-678a-4b25-9a88-79733f3baee1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "14955eec-019a-4b5f-baaf-aa5d2097d63d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2703,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "70bb5e4b-997f-48a2-b240-62116ce27a48",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "94a14cde-a097-4646-b9ce-2f4681e0fee1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5679a62a-db86-4772-8f32-84dfca83a98b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "df736110-c9b7-406f-8ce1-51d543ea089f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2744,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0b50c888-b57c-4875-a3a4-b4f147042afe",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3053,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fa6cabcb-8304-4e21-8c70-0ea2f31a61bd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "70d2bd72-78f5-4e40-a9a0-d0365ac98deb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6221b936-d7c8-4bc3-9eb8-d0edc7ff0081",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a6310267-f2eb-47cf-a96d-fe17340cfebe",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2718,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dde214ba-54aa-44e9-8467-64a05d15e9ba",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "be24fd5e-8771-426f-b2d9-c4e66f716abd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2879,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1a331942-6aeb-4eba-b663-41b716d796ba",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2995,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f4f4e587-003c-45ab-8850-a813aedd30df",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "265c74dc-aecc-4040-8760-c000b9127d07",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3089,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7baa8e76-0b34-4dd7-b306-cc5c697839b0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2688,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "94d69e79-8f17-488d-af1f-acef5dd4c307",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3042,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0f0b7614-a97d-42c6-93b9-88cd903e7de9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3080,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "66f59abf-9878-448c-bb54-7845840dd217",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2949,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fb864468-9f27-495f-b762-cf484fb3afc1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2703,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ae7a04f8-f39a-47ec-bcac-cd5c84a83289",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2906,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "658e8ab8-6f59-42c4-9579-c287b4691cee",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5d179e48-298b-409f-b90d-89e909e9a9da",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2683,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8b6ffd4f-ddd1-4468-86f5-6d0a079dd999",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d1b3b8f4-1a05-4168-abe6-bb5f3727c079",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9dc94d15-0c4f-4208-abaf-822f2afa50f1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2890,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5de44411-e22e-4ff3-b61e-96a71223e0dd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0e125466-9c67-4221-98b0-7896ce781cc2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2895,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2e5d8ee5-7c18-4913-85df-5f4de0232808",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1debe9a4-4f5a-4671-9723-e046abaf4d75",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "10594128-f87e-43fd-a569-55a1e3e1423a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "af531525-6d8d-4f17-8256-c01bf0cd4ce0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e9d680bf-e52b-4e8e-bbde-12fe6824f507",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2755,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c5474b36-095f-4935-a6a1-0427d5f53d8f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "023e3752-e57f-478d-b0ea-689382aa0fd2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "93a77c00-cdff-449a-8d5e-427f560b4278",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c790a097-ed3b-45ea-92f6-3c7efb62455c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "75c6dadb-181a-4172-9265-ffa1882523e6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "94a4895c-ec6e-45fa-9561-8850b5259b29",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cc9d946f-ac4f-4bee-898d-a057a981ee03",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "50a8292e-5f0e-444f-bcb9-a139456a0fb1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2098,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cc9c3c44-b9fb-45f4-a3d5-ddeeb20e1d37",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "014da261-2e29-4db8-a58e-246560f7d48b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "499dd91f-2b10-4c03-b20c-5033d7fdac39",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "83cef6d1-fb83-4944-9318-28f20edd87a9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e01f316c-4d85-4261-a164-af3deb3e5c58",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a8e6237d-e3b1-47e5-8cdf-1ff5bba68600",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1983,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c2d4e871-8ac2-4bc3-a430-81f380283c5d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "75a36ec4-64d7-4bae-901a-fc962cf30922",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "82fa2f7f-b801-4ae0-9ef5-ca913f70258c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2fd2cb8f-64ea-4bef-a76f-93aa697aadad",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "263f77d0-1c06-47bb-aa9c-e7aee647969b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2049,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1955ee48-0331-456a-b39c-1cda20425eb7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7dbaa8f5-d15e-43a8-a4aa-54daf6e298b2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "044aa4d2-8197-403d-806d-54da24f380a7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8c0ec5a2-8af2-48e5-9bca-a52106935ba1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "62c31e82-f84f-423b-ac13-927a340c2ed1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5e8448ca-9984-4c7a-b55b-c54b8a27191f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8630766f-d5f0-4788-85b6-a78c0f5a60f4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "20b42b4e-cb03-435a-9078-f8700df70740",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2670,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "675bcd09-d087-4ed9-a9c5-843d2918beae",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2629,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "16e296b9-8cac-4643-aa50-f0fc28a9dba1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "87320de5-abd5-476c-84b9-3c91df6ca3b7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "53b75dcb-668e-48a8-989e-2da2e1f765c1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d8b7a17c-7486-4872-bf84-75c086a0cf60",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "608c4721-05a1-4500-a3d3-178ce3e76031",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00550a72-074c-40cd-8f1c-2fc8dba8fcef",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fff6a17f-9916-4f82-9177-f762ef8a8d07",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0e5a17b9-c90b-4341-b601-60f6d417b3d9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e29105ba-1028-4eb9-93bd-de6b95a53d38",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "78a47d64-5a6d-4f51-b417-9e3bcdadd5de",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "80f30f31-c197-4513-9252-af63c5a0a5c4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0f918638-5902-4f18-a9b1-6282fb375544",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2065,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9c3e1ce7-7f24-47e5-8073-671709d2f288",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "32556ba4-1a82-4070-a4ef-0bf6ae1a5dd6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1997,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "db97fd26-5fe8-479c-af95-cd34f5402497",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8090965a-9e73-427a-bd2f-fc7be3d194a8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7640c85f-99a0-4de3-b53d-2bcc541e15ad",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "565b5a6c-f8fb-486c-b03b-7e5f7335acfc",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "93154165-fce4-4b4a-9d77-47e76bacd192",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2576,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3399624c-2d07-4c54-b281-b50d7047b527",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "66eb0b09-9d8b-4ead-8a2f-8b7bdd7a8119",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9ca33283-7ad5-4f2c-8114-5e1ca469d717",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0487cfc3-0bb6-4976-84d9-c64f4ec0ca5b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b80dbd08-311e-42bd-81ee-b7fe6bfe5ec2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e8c4d9c2-3ed5-4a99-a4bb-5d335365619d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4ff4ea9b-918a-4c89-8e5b-72dda71adff1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "abf79361-bdbf-4ab8-bdca-e3cce872be8d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "76eb0af6-1026-40d1-89eb-f07b011bfcae",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b999343d-3b68-480a-8105-955862964509",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f76e0813-8ced-4f87-8229-aef1322c72b6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6f10c83d-6c4e-42a1-8eea-4428ddc434dd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2623,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a301a821-2fd5-4203-acff-cd816a41ea99",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6bb6df2f-6c5d-46f8-8c4c-f6c5038a64fa",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c8426960-4d17-46a6-9599-a348686b2e00",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2473,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6423e782-e729-4ebe-923b-a560593ea9a4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4efcefbc-756b-4dab-9d91-23c2d867eace",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2575,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "97f1025c-f9e3-4289-bb62-a6ee07c2f776",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b94185c5-3ed8-404f-9cc9-5ab36329442d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2769,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a27a3be6-3092-41dd-98ee-8b615ac0a696",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "877a0928-cd4e-42ae-b582-d57bb28322f0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b90cddae-7a28-4567-91ab-457214a8c95c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a12f9531-0b84-4650-8688-89b61cc41ca3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3d9952f1-0311-4fc4-bccb-f6579798585b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "30e349a2-eb81-4b40-8cc8-e2fc0b14149f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2358,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ee25bf22-1fe7-47be-b773-52a058d6ad00",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f99fbf63-33cd-4503-90f0-94274fb002d4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "82dafb2d-bd99-4c3e-803f-e5b2f4af4379",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2940,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6b1749a9-12fc-467f-91b7-e8ab1cfeeda2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "23512346-d9cc-4a10-bade-95b945b9e6d6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f0a1bd30-17f3-4023-83c0-7cb4a6501ed9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "46661a07-4b06-4e1f-bff8-078c720bce87",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f1b87544-ad44-4583-bd04-2d28cf97ee98",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d13cb757-8b46-46e5-8b86-d44a578e88c0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "50a15872-80e2-49f3-ad90-eb572e8eeab2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e80f915e-5b31-42f4-bb4f-4d841289fc41",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bc11c459-fffa-4984-8825-3c2ae048cd39",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6d3f06c9-1c8d-4d42-960a-b999683f0b57",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "32a430ca-ec0b-4a4e-b717-b9a68f0df0ab",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9250bcd9-320d-4f50-a336-c8405cb0c37d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c9092d95-e148-41a1-8ede-326c42246a14",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b884f5df-41e2-4c9e-9d7e-aa864239dc36",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "caa2a39d-1d2b-4a00-8535-45ab2049865a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "54ffa866-5122-455d-9f3b-53cd045869ba",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "588ee638-a9a0-472d-8b19-e95d7661d600",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5b49c5b9-1d95-4a67-9837-13b01cbdbfd5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "43246375-0418-4f53-9e5a-e8e4c5ed5b56",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cb71fcfc-05f5-4c0d-a76b-04bd9910fb8a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2346,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4ea92999-99a5-45e3-af65-9edff7981847",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3cfd9b9f-7ad5-48e1-9707-429c7edce940",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c32fbec5-8dcd-4af5-a2f2-1036c032b4ea",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2026,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "30afcf15-2493-4ff1-8a0a-e0e9dd9ecc31",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "16cb1658-6062-4626-a396-3ada5b83733c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2080,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "24ee5fa7-ca92-420a-92ea-a4f07be54cbe",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2744,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d645dca9-66d1-4d9c-ba74-2e827e3aaf61",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c3eef6f3-5ca4-4a3e-b6a5-cf0955302340",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a727306a-491b-434c-862d-12751a4f3ed7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4308c9cc-5a64-4e28-b76b-d0e892894840",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a6d5b1b7-72c4-4732-9a07-d2afdb0307cd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2460,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3a3455e9-0759-4539-91ec-0ec3a50964be",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b37c8c04-8f91-4b31-aa72-6e4c51d34ddf",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a1f5146c-e559-451f-9ec5-2becd1573fb6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2339,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b9c1199b-4b01-4e5b-8cc8-372f24e1194c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "42e6df4d-9f18-475b-8b58-6094375397bc",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2064,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b44291ad-a61c-444d-b47e-b7fead31b63a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2252,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cd8832f7-a36e-4441-b9e4-c8c8183b4ff5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e6ca550a-8db9-4ce8-9919-cbebee00ea25",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b21ae231-1c7a-4143-b389-4a912280ae2b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3241c531-88aa-446c-b427-35dedea091bd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "abb13c8c-9393-445c-9f77-5e3b2d7d2e9d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "33de0383-142d-4cdf-8b35-43602ac383cc",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c55492bf-fedd-492c-b3bd-a26242e92518",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d9071978-e208-41d9-8b1a-c7327411535c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2063,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "19a4f8fe-1e65-43f7-928c-aa69b411d16a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2390,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ad908211-4141-476a-898d-4dd579971f77",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "17a60920-02e2-43c4-b82d-7d9a11e8238d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d6f34730-f557-403a-8da8-ab54e82de2f0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ad075d62-7140-4620-b013-35f5522dbb0a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a5a14570-69fd-488b-8942-99eb9cb49e09",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2067,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ec1c75d5-8a9f-49f7-9b7e-99c010c3539e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e3f5bc58-9465-49e2-97df-524433d176f3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8c3d6f51-2d3c-438a-9978-dcae20e4ac3c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e3cf37b-866f-4a33-8403-afd38cc9a7a5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dd1562fd-7245-4a6f-9465-9b245b445dc2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cda93a03-2c97-4a1c-b24f-d57c72496346",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "962d1b1d-abfb-4a3d-b3bf-5c78ebfc04ff",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cfc854b0-5222-4b3d-9910-5ebed34a60e6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fc47fb6e-b290-45c1-bf9b-7c30ec99559a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "57f908b8-4b8e-453e-b350-5995f956609d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7f6da6ca-261d-47a1-b38f-830e558fe265",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d0e062d1-cfac-42b1-ba43-84090e1a99d4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d9f1d82-1376-4dff-beae-ba34ce601155",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d6e78bca-ae77-48c2-b95d-993c8b342646",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8a0b8616-df13-4e94-acb8-1bcb9df39471",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b558d385-f296-479d-b81c-ffb045d44ebf",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "79f8004d-c684-43f7-8434-b73a767b08a4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "90148aa6-ccec-4383-9661-13393b00044d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "25fded9f-1608-4250-b2c7-d70e5175cc32",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a041e676-295c-4d65-9cab-93acd1af668e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2699,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b8d1b984-95d3-49b4-b8c8-66174a1c7a4c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2343,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00ab7bd7-5271-4a21-94e9-66b1dd6a1f25",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2336,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fc0285a6-fafa-4551-9a62-b7a71079aca8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0fe0f910-f558-4382-99ac-961c88f87e3a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2300,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a9d64770-8cc6-43d9-940b-95b83727995c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "63775dbd-8de2-4ced-a0c2-4ae5c89f3d70",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2386,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f03b7b74-cf8a-4f09-9a19-19ea3b763abd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2306,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cd091237-1fab-4bf4-9fda-e8789882aef5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e3cde700-dcc5-42c6-b19f-ace742d8555f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "48f85b2c-2182-471e-91db-80a5e9208860",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "43c34aaf-1cc9-4773-b4df-5ba92dfbc4d9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d0a5062-2da3-473f-ace8-20eb9be59b43",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3038299a-6793-4b12-8322-58feb841e3af",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "acc74379-5ae3-437c-b281-863b929eb0b3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e68c2292-918f-4d3a-9a21-c966d362b877",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2239,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d388c749-3d91-4099-8042-f131997a0b52",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c08959d8-d51c-4f40-a9a9-8099c4e97ea2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1a2dc482-994d-454a-b292-64d9e9530259",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d8cf522-11e5-43f9-9e90-1919387505b1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4818457d-6e42-48a2-974b-cc4e31e16a3b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2629,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d46ee643-623d-4f4b-a36d-24ce151df592",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b4c077d7-4a73-4a88-9fe8-c8718b8bd3e4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "18d7ca2a-9640-4ffe-90b3-386b1436e252",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "09e0135a-2df4-4ac1-9d8c-0fcff9140e74",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3cbe9f57-21a1-44fd-a9ba-8286871be49e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "980e63a7-5a6e-449c-a199-5449539fe1ed",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bf93c0e5-a238-4ce5-9b07-40a6dc95fbcb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fc9c9c31-d4c4-4664-9ef8-fb4f77975742",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d3163ec2-38a2-4a0b-8836-313d888fa2d6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f8718cea-76d3-4d55-abbf-3e6d735f1ff3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "94d6b1a6-7c88-422d-917a-de1cc88f9444",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3305d945-67ab-49f3-b980-3fe881cc1ebb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7d5bdfc7-e443-4fe9-9d1c-98a7beea21f1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8390d61a-6991-4d15-95c1-55d574af053b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f5bec80f-b0f0-4947-991a-5c0cdbb17085",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "358be270-6f15-49ec-abb0-0b93b65abdc0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6a7d5cd4-7d1f-40db-adf9-a5aee271d4f1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7a03f6f9-84fe-4d81-bb41-a4f2ec1bb406",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9507d51e-3591-4819-8d7b-0d5ad7ab9746",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e1103090-c266-42b4-ad90-7eeb6dd7888d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "af8eb6ba-db53-4766-b07a-b279f2ae41f0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "18605519-9a44-4b0e-8d18-973937f4b411",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ef0d26f7-b100-46cb-a99e-af350793db32",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2721,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9a168c8d-dd51-4b5c-9acc-3a222df5429c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "08858d47-4efb-43bc-9b4d-639ba192aaa8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "18a81059-92a5-4532-918d-741601becc9f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d22896b-f102-4265-84e4-2abdc4a7ada1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a0db0009-f2d0-4712-a468-296681c33058",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1c9a1a15-8535-4120-bbbe-d8e6b3ebe06f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "20fbbf2e-d749-46a6-ad44-3434df4cde2b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "adc64eb0-0e66-44ad-b599-2081268d8970",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00a939e3-352e-4930-af9c-a88f51ee8f2b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2694,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4d4afc1b-5640-4021-b7b4-b7cee4e2b39c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a8603dc2-c1b8-4ce1-88c5-adb675d98000",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "780bcd60-503a-4528-b156-041a4e8b9a68",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f47f52fc-d60e-4193-9c69-937e1b1d7ff7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2cddcc29-9c63-48ff-affe-136546d8feb2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5e74b579-13d2-4371-9802-243a36640ae3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fea83e9a-281a-4d5e-a11b-ab501d43038b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2632,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "081dfb5f-e372-4412-8dbc-8882dd4f25b2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a5349395-f139-4d2a-bb76-cd0280678a19",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "240f4ef7-e85c-4a55-8091-635727109471",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "572f9fd7-b57c-410f-8db8-b7414b6adce5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "37f46de2-9a93-4076-8190-997a9dcf9aae",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c395018f-ef65-4ca2-bab3-9c3bf761039e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "02c4d4f3-4025-449c-bdcd-0e2701747994",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f08c28ee-093c-49ef-b6ed-e57829197fd4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d373df52-8224-4d68-a8b4-8c7cbbabe5b4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2472,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e350304a-069d-4da7-b21b-e5e9ab995314",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "69cae2c3-fa70-4504-b0bc-0b539c299dae",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1bbff889-be32-40ae-8e2f-c7e194b51d9c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6e42bc48-8566-49b8-823d-a5aedb77ea95",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2314,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "066bcfe8-af3b-4335-b50e-dd99ffd1a5be",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a86cce82-c1fc-437e-b2f2-fd066a7e694c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f4cf9615-dc50-4efe-9e67-ed0adb1b0541",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2015,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5a8a354a-2d7e-4241-86a8-6a9afd2bff45",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "993b73c5-c120-4a43-8183-9b29ba6de85f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fdb41937-3839-42b2-a26a-4f4c66245436",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "54226905-8e39-44f5-af15-6c981197a972",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9ad874d6-9704-48eb-9ff9-e84865e4944c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b45edfcc-92f1-4666-9c03-2d0157bbcbc5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f7dd809d-1b88-428b-9af3-aaecf37bfc7a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2502,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3e75b0d3-51c7-41ea-9115-041157f7b938",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7f5af2eb-2e7c-4f0b-b63e-374e22bce71b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2317,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6f51aa86-629e-401f-9ceb-ece693709ec3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0362ea5d-d489-4015-9f47-e5d77776b467",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2693,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2d8e1339-cdef-4b78-bbf2-b8eea7a31b8e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f6452219-d574-48f0-90fc-b601548164b0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9aa3333f-0c50-4559-87b4-08c3ff9f2f02",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2055,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "183d7d24-34e8-42d2-acbc-1e5515b9fb1d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f84b07c9-b24c-45b1-a047-1b73dac3e604",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "96051a9a-021b-4a16-acb2-5e8c64c5d4ad",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4e767595-1ace-4240-9fc8-fe4870c6dccd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "38a2c636-b082-4edc-941b-1fa9fc7b9d65",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dece0520-de37-4116-8091-751b7264df3d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8c3a9c60-baf1-4167-9dd7-b3bee11caf2a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "94ce412d-da5f-40fe-a91c-c11870df4f90",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4c1bdd85-8d33-4a79-9b2a-ad68c3946ba1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2441,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ee15910b-b92f-4909-bbf6-d71327619944",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e9f6ed37-51a8-4a4f-af4f-570b50367fbb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2638,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5a7237ed-cf6e-4a1c-a271-2d40c37a8c0a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2079,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "33fd5a0f-7ba3-4251-a37f-095d967f5236",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ec14b425-a7ff-4058-ad14-0529fbbaa81c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2666,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bc699a28-4fde-47dd-814f-7fc3b87cb4d5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2364,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b3e00c85-ee1d-4d6b-9f13-2e7e2e8d3780",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e4d13300-0e02-48fc-9783-8334a5f05207",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c5013c17-8d3f-407b-b39c-8bf93c30aa9e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2628,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3cc3a1b7-8b3e-426c-bfb5-2cc3e9350b8e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1834,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "085ee349-2314-4760-a46f-e75f2c8e3151",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a6b5b2bc-0314-4e81-95d7-981ae128e488",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "41a5f7c3-2fb5-48e0-92ff-748e4ac3ea38",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1861,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e59865df-cdf4-4269-8226-f90d1d048cf1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f7e8116d-e9a4-4403-8fe6-33e60733c669",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1762,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e8fbcb57-be56-456e-b2a9-575058381b92",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1864,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6ff1464d-ef5e-4bba-b137-85b3db1f84ec",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3ec5f521-3b38-485e-852c-4cd917283960",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6e533bb9-2b10-4de7-b278-a31529df03b9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1647,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f6350607-4be2-406b-b766-4f22038b4d3c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6b671796-1569-42c9-bae1-9754e5c8f573",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1966,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "68ca29ec-06c4-475a-97ca-c25386887214",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1844,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "80cdf84e-bba5-4a3d-b977-92f05888f9d2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1740,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ba6b9338-6717-4991-bdf0-c4355290f09b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1807,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9c0040ee-2460-49f5-8245-84b778afd66d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1965,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "065b4350-f05e-43d9-ac1c-6cca4f514504",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8c5309bc-acce-44af-9920-2688271f0bee",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1894,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cb50f3b9-8526-449b-bde4-f3f28d13efed",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1941,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "63719bff-2694-4b8b-a296-ed0b0eccdc52",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "80b47c85-207c-4f94-87ab-625104f0f646",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bcd19d29-df4e-46ea-8ce0-9bfa5a2a8bb1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1582,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "47e2a232-2807-4dc9-b9d4-3e7e14cf4036",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "416a0e56-9310-41bb-a61f-dc8df52ec171",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1811d4ec-c5f1-466d-af70-b8f4f865cede",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5ddcecfa-4a60-49d9-9945-b825bc473935",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "255bee1e-2495-4540-b6b0-d13462015cc7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1771,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c3e05ae0-c151-4cae-bdf0-124b113ebd0d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b622335a-6ca4-484c-8f67-6fe0e6c810df",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "52f08750-09ba-4358-bd5c-9e26c57e80ca",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "eb25011c-61a4-4725-92c6-85b7b75af2a4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5465fedd-82ab-48e0-a2e7-f306d55b7f1e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "baba0de1-b6be-48ee-b533-faa943790bdb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2063,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "55bb6a0b-3a36-4796-86de-06fe8785683e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "459dcec2-47f4-4fee-9eb6-c3a57921bcb9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "480b0382-30ed-46b7-bbb0-a6cddecf2ede",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1673,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d28dcb04-7bd1-468d-bb84-11acd5c0654b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1805,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1ac3a9ef-4554-4a46-941c-760a3c150d9a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1849,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "92d19e1a-cbcf-4064-82ee-f4a9f77b6495",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1849,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "29fda373-ab01-4026-b4d6-3775edcb9926",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "34651479-557d-4718-b0fb-82324c24b2a3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1845,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "09ce9ae3-dc8a-4635-8738-f01cf8f35ed3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "37538f40-5a04-4610-90d5-c7073c75d62b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dca6d819-ad09-4689-8f65-34975845cb5b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1832,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c25f66e1-a52d-4b28-8527-9b09d6a43665",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1926,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "47bde2e0-47c7-4260-8ed5-01ceec17c096",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2068,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d470d88f-c7b3-4707-8ca3-3837197dd4da",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1917,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d8842e1b-0ce4-4c16-9480-fd31c606ba58",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1767,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8db70cdd-23f5-4f53-acd4-886d248f89c8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1736,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "26f2a9c8-f3ca-4b10-b8f6-8b68c4e425b6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1847,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8258a0cd-a34e-450d-895a-48932ec1f1f0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ddac9623-5ef1-41e0-be52-505a3e368b27",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1849,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ba1898b-b135-4c4d-a9e1-743969fa7454",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1703,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1d2e4be0-a866-4ade-b5ce-1fc6696fde62",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "be3204cf-8798-4ba7-a9ff-dc1055e81b6d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1755,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6b76a792-241a-454c-8884-19a56213a3fb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1915aeed-abca-4ad4-9dd7-114eeb9db38a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1748,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5acd494e-3da3-4fa5-af08-bd997e82385d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2051,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3d72660b-828b-40bc-bbc4-9e40d918211d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1947,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b6ae7996-7818-4b55-ac78-3601ccd992bc",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1788,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f77f1442-031a-48ca-8ca4-b3e6a35f2502",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0a1902aa-aa68-4ced-8a6e-e74f2ae620e5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "abaa06fb-b5cb-4515-b67e-b5ad27698dd7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1854,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "98fa32d1-b153-4f61-bdf5-1eb15090fdef",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "899dd54a-c0ca-456d-a540-7fdd3fdb2afc",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fba6a63d-af1c-4a78-b163-cfd50acaa476",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1831,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c4b17baa-a715-4cf8-8b18-557e6b4fcd4e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1880,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0ccfe5ed-84be-4696-80c2-6d98ba1934e7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2075,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a9113f38-fffd-42a4-a144-ca105ce67fda",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "21909a79-6854-4ddf-a2d3-4028058ba38d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1939,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fcba13b4-f460-4194-8eab-382a512c0265",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ad4d6db4-2a16-47ee-82b0-b15b544a40d7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6a5ba0ae-0430-47e4-8ebd-4d114da55da0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1792,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b15171c6-2f8a-4e7e-9260-a8496025384e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ed193541-c38f-4531-8120-f6edbbb17e22",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0fc980aa-d27e-4e68-a833-8d1241c94c7c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1815,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d900c186-5cb7-4246-9ec6-585900a3e6a6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "408cb0fa-f9bc-4769-93f8-b6673265e182",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b9960c9b-c47d-46f0-887e-51fb4b8b65f6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1773,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "074889e1-ef20-4672-b559-001a2b46cbd3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1649,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e358a10-58a5-407e-9b83-81ee8324991c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0f6de49d-96af-40d7-a8da-0b944cf1a4ca",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1793,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "03cb4c1b-e9a3-4bba-86a7-58f5bccb2717",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b046eb73-ca67-4b36-8a74-9d4fe9876c81",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1886,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8b256171-ccbc-4277-a1d1-3e0d6e592e35",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1975,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "759b4b50-aa64-4a09-80bc-94595172e072",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2000,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d718808-fd40-4986-9bc6-ce1160f1208d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0f6db9e5-2002-4467-be17-fd0ed230d15c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1685,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ec43f9f-3fed-438a-a2cf-0413c8cde127",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "93d1ad06-aa37-40ab-b7ad-e530a57b5fb9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8b7c6c7d-afe8-450b-982b-3af6c225e8bb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "73cdacca-ac69-4c09-a27b-db1d7ea12ff8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f292378d-44bb-42fa-a781-c0e7e3b0946f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "92e1b056-13a8-4606-8a11-a41a0e547fee",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1350,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bb5a87d7-8a66-4be2-9904-b16c582c855b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2b14c2c8-8da0-4841-bc79-4947399e53da",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1ec22f27-2810-4e47-b2a0-3ec1474df9a2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e4cb9879-abb0-4bd1-914e-f68ce23c16f4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e5b99c91-255f-4f9c-8f84-59c6e328d1a7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "aa198810-bb11-4688-a8f3-39ee100b000b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1239,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "74ebe5bb-82e0-49fd-a51b-dbdf4f37ed1a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1291f3ab-de89-4c67-a723-d0bdedd69f8d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f8a342ef-6387-4a91-9922-e0244dbb6491",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1f20dc7d-9f79-4eb1-9077-cffafec82c78",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "482a8469-3219-48a4-84d7-7c5db3e239a1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4396324a-56c8-423e-9825-4d0921aaa2f3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a2b75c37-fa82-4009-9af7-50791e467288",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1e8c620a-431b-48c1-821e-b4b5196abef6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4a055fd5-b811-4a18-a22e-a24ce06fc1c9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f6dd774e-8a95-4e84-b75f-4b654c1dfccf",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fcb1dfd7-8611-4205-ac72-7d420beeb490",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "73368971-362e-4543-b450-ccbf044748c8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fd2fdb16-cd48-4cf2-bac7-0b463e199f24",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3bc068c0-3cf3-40ae-b867-17412c2dd854",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "933aa017-81be-436f-b83c-8c6d9b511147",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a6e4e0a1-ec8b-4177-8353-855000d1e5e7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "11c35eb4-54f5-4409-82a0-b2da17e2c479",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fa51a144-b751-46be-8f6e-fa8a9b30e2f3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "41390d58-6dc9-4dc0-9400-4fb28ee4ee10",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "95aadef4-4a28-46c2-9f93-ba304b34f2c1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c9850f56-46f7-4bb1-a18d-4525c989bc40",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b8cc7f13-6f2a-4797-b342-0b56833e3492",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00443109-fa50-42fe-b8eb-55f9006e091f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6824fff8-0ecc-46e2-b0cb-4b5b3bf867b8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f590f7e0-94f0-43e6-9afa-45b5d50caadc",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "26de10b5-8863-4ce6-86f2-5af2975b254f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e13fe405-3647-4a8e-8332-2b24f14289ea",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "006b36b7-36b5-4db9-84a2-2167a923838a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ce17bcba-21e2-4d38-b761-8f7a1288f95f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f5b060e3-0e4e-407a-9472-61a421f97100",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "20a186d6-617a-42ce-b1a3-a5067bbc2066",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9f2160b2-ab7d-43f3-9c2f-ef9856caf197",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7a42b7f4-fadf-4108-a408-e0df10a7ec26",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "79850e0b-98be-4e45-90d2-b881c30a5650",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d569643f-b7f6-4ecb-bcd7-1dcd7d17bb74",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "da0c67fa-e695-46e8-8c79-ff50e1903cbe",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9af32e47-3e3a-4992-9f97-83220caafcea",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c47e8d5f-6259-4d76-9640-5bebe9676e68",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1489,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f3df1d7b-f85e-4b49-9587-0eecb1676e9a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d763afc2-aa69-43b6-93d2-2ca54b481e23",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "eb713092-4b9a-4c7a-b1bd-79e09c9abf42",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9b50b706-286c-4947-afa4-726deb0535ed",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1300,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6bd1d1a6-2ba3-4d1e-b1f0-47b53d380ece",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1770a5d6-a12a-4570-8368-46a8024ce8c5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "eb4cdb1b-fbd8-490d-b730-7ef097c1e818",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "79070d11-6e4e-4189-9106-9ed42cdeb103",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "09315c88-695e-4027-9fc0-35d3c275a65b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "94606c4a-5989-486f-9137-a1acce2d6af1",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e509f65d-607e-4f1f-aa53-4fc86f15bdbc",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fa5d4b66-cf4a-4c80-b9bd-37a118cd439a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "103b5697-b222-47fa-8381-9494a0302d24",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e561b778-d005-4d5f-9c3d-b5b5d8fcf936",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3b4ad380-ff60-4510-8dfd-760edcabe582",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "447fa763-256f-4c62-8d62-8ba564c9f77b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1285,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8ea81552-1725-4d28-94b4-47e559cb2637",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a1d3ca08-c339-4474-955e-8485a566309d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ab881aed-61aa-4841-9080-67cac0d1fd31",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e0d93b50-33fe-438d-8594-35319720ad46",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "db856cef-5fbd-4c7d-942e-0254cc6ee2b0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7a282104-e086-4ad5-ae5f-808e05f69373",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b25cc48f-c40e-4ca8-8850-32f48b54a247",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1339,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bc298931-1f65-4f6b-aa99-7276b1c81b99",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "094afeba-d844-4d18-9be0-74f9c628188e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2b332638-2f5e-4943-abb9-a11c08d73e87",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "74ce06b9-0b47-4091-bb96-ca428af08ed3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d604201c-84cf-40b2-93a2-910a909b131a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "87dca8a4-e577-45c6-8d9d-f66419f55edb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6b81578c-9335-4181-8591-e930f733f279",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "58e366d4-06a9-4749-acd4-b52ea19d0ab9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "128f7317-2c49-4bb9-be87-9380f43789be",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8ac40644-7670-4d9a-befc-62e59452d501",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3decc34c-e29e-4ebd-bfef-4e90fe930b83",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "478ccdc0-0c8c-49de-9a66-10f32e60cd26",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "345369cb-66e1-4f36-98b2-0975ea497d67",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1485,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d827ca71-bad0-4863-bebe-8f972ffde071",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9fb7e650-466f-4179-82ff-9a2a17993d8f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0a1bb3ec-5895-405f-af87-2c99bcdddb95",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1555,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9607b563-af5e-4819-8693-ff501d7d599f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0ec2dae8-1d30-48f1-8451-70670861c6c9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8eae85e2-f60d-4b45-9ff0-7f48bcaa5ed5",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1429,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "97aae580-4cc3-4214-ad55-69c0fdd36992",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "23be54f3-3852-4439-b295-aa431b4602ac",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "02a28d77-f19e-4504-81a8-46963c7c077d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b575a9ea-aaa9-4078-bdc0-0db194ced569",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "155aca3e-018e-4eb5-9e60-3dfeb0f86ccf",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "549ee0da-92a1-46fa-a96a-b11224e308ae",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "416d7402-4e2a-4aed-b830-a50d03610830",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "579daa86-ffae-4ac1-ba8d-af1ed79fc43f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d74eae6e-2c1d-4995-98d0-f0c193cf1eaf",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "aef6c831-60dc-4b9c-868b-8b88b2e03da9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1476,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d3f274a6-a216-4b55-8401-3dc72ece69ca",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "be8d6911-4de0-44b2-8636-b84e541639ce",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "08becfa9-9b92-4bda-8c1b-60348aa18497",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1394,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0134fa5a-c683-431f-a31e-68a2546d24a3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a3ddd9ed-d5f9-417a-bdba-e6067b2f4e8d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "23be8c6a-a250-450d-a59c-ebe3f180d304",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "78ee6d0d-eadd-4775-b972-24e13b71dd2f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ba19df5f-d0d2-46d3-b842-a211c1b82f6e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ad1ac375-da52-4da8-84d4-be80860407a2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "065d658c-2bf9-489e-bc33-9338a34f1b0b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9dad6ee1-e870-4426-bf84-3a60d01c3432",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1550,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9b5f4280-c5bb-4ed9-9782-de374a8482ce",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1913,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d58a5027-f37b-4dd5-a9c8-05bca108effa",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2055,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5ba6e049-5b65-4f06-83f4-e792c8f1fc78",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8d21a432-39ea-441e-b694-17b5dd0e5dd9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1719,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "69f27ce4-dd32-459f-982f-47a6ea36bef7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1683,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "13854075-9aa0-4645-b52c-2e906df7546d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "690a4995-19f9-4080-98c2-31befb432016",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1972,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ec708c23-379b-4138-9432-b2e1e9444cbb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1898,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "22155ae0-7dd9-48b0-ab9a-4a272dadc87e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1837,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8963a033-2b45-487f-8a3d-e68a99f7a443",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1932,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d6ed6d83-3cac-4ff3-86f9-12f1f7f4dc0f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2096,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e6839279-1494-4488-b1a9-675357e2ea2c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1806,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ae39ce2e-0879-4e75-a239-5b4745fe63cb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1922,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9451d299-2b54-4082-b225-34cac6073044",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1593,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3762d7e2-7787-4007-8146-c0b7a7e57601",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "179ff5d3-eca8-43f7-9793-7ea73e646e2d",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3859c66b-0d5e-4663-b953-4521a091cbb0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1663,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5ef0f120-24a3-4ba3-b546-68f0b4535938",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "599f868a-86c0-4b1e-ab12-edfb0b477c9f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1849,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2d9a26a1-7e64-4f35-85c0-adb7b2469898",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8ca7a601-afd5-4154-8b91-79492c4b0a2f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1830,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b0ab98dd-e2c6-41e2-901f-9dd9c90ba802",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1708,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d60cb08c-a7a1-4bf8-9f4d-2c703c98ec4e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "602a652d-9ad9-458d-a92c-8fd07da52b96",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "55dea8a9-8ee0-49e6-b57c-8aea629eaa92",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "adaf41ed-5a80-405b-952c-78e91b7b5ce9",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2092,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3502f733-e811-46fb-b96a-5b8cfc49d555",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8a945d6d-c53d-400e-8287-c2d619fa22bf",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1eec9041-7634-46cd-9c17-cece19375bb7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7d62294a-eb90-4505-a7e3-4483f2737ff8",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e3bd3893-a317-4612-a3b4-a3bd08a74d8c",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1628,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "24256cbe-c807-4af8-ae42-e15a582cf4ee",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fa82e611-37b2-4851-b7ac-2ecab08ef763",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d4e781fd-ed77-4abd-ad04-16e675fc4f15",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1796,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fef58fe4-4bbb-45bc-811c-9944b0b8a0e7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1941,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c35ca127-10cd-4f0f-841d-6649490c4de7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "01ca5cba-3e9a-47f7-a8d0-0004c44670c7",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ba2e9b35-7914-467f-a107-77ad3fab2ba0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1898,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1aa2ba82-7440-4fd2-af72-63b5e7885f92",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "73895cb6-bbe5-495f-bc21-2754cea1cfc3",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1860,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ec37b12f-5aa8-409f-9621-fe83665512c2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6555e765-a56a-46a4-a27d-d38b0c2d8843",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1903,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c4909d95-24aa-49ea-ab8f-f890af3400d6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1934,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4d14f96e-6445-4940-a923-254a0d974f82",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b5644869-c319-42d2-b098-bfb228984757",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1655,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e03f4226-b134-48a1-87e9-6b04cdea0013",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5b4cb7bd-29c5-4a04-8016-c19ea2685794",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6b24f273-af2f-458d-bb47-a739902131c4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d387e5bb-3ca9-4a8c-a164-dc257a0044bb",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1847,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "13c1f44d-bdb5-413e-b972-61f0982ccc61",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1657,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2b139d5c-ea51-482f-9b93-271d7d94e5d6",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2300,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "07562461-12ca-4fa4-b310-16f44cac13de",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9511ccc5-fb71-4023-b888-0d7b05c9d274",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0e35e368-d338-41de-88cf-cc036d347bd2",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3a214b00-2fc4-4f87-a8c2-ad91fe35483a",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1426,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "57174297-ec98-417b-bdda-09e6f17950a0",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1896,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b12f324c-4b66-4a6e-b5e4-39227a87453b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2055,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c40d3dff-2544-42af-8090-406d55a06c06",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1298,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5ab01744-2238-485c-94cd-69ed86a38b0e",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1720,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bd7e419d-cc7d-4bae-9e43-2fa34942ad0b",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1751,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f9b7001c-3f53-4efc-a1ee-ea14f00d24b4",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e341a0c2-5c6d-4e14-8bae-bec4701a4b4f",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1592,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c0066b2a-3c2e-46d8-9fd4-aad0d8f56afd",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1845,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-14T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bf99737b-3a7b-43d8-9c47-84c3c940bb61",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Welcome_Intent-convo/WELCOME_INTENT_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Welcome_Intent-convo/WELCOME_INTENT_USER-L1",
              "timedOut": false,
              "duration": 898,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: Hi, welcome to Hogarth's bike shop.  How can I help you?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d3b84902-94c3-451b-a1cb-104db5b39996",
              "parentUUID": "554c2673-1c53-4731-96d1-51ca8240194b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5d7fcf4-e27b-4c1b-b610-2076bfc91875",
            "9d98012c-0853-4897-af0b-307024df7eb6",
            "90693578-e096-4810-84a3-1fcdaf58af6d",
            "5495d857-4629-4abd-8eab-4dfd35ab5a68",
            "c2a269d8-aaa3-4441-8bcf-80e8657dc301",
            "6667f7d9-8af3-4230-85fe-4a14d7f22bb8",
            "970ef941-063c-4e71-a600-0fb97f83089c",
            "bcdc200b-4328-484d-991c-faf4b8e0f0ad",
            "75bfac14-aec8-4baf-98d6-380952f2e655",
            "909fe13d-7801-48f0-8c06-21452c5eb209",
            "44cdb712-e5c1-40d9-9239-9596bb43440f",
            "c1ff7885-f09d-40c3-b6e7-d1a38f43dd57",
            "d7303d79-a102-4361-85eb-5bf07045b276",
            "1e4edca4-961d-4410-9af1-c1199bcd4e7d",
            "807ca65e-c67b-4c6a-bed3-d361917a1495",
            "8e88d30d-bb00-485b-948c-6ea9fca3274a",
            "0c239e3a-1c6d-4fea-b70a-fede05558035",
            "c3ac677b-4c47-4441-97ad-57b95219491f",
            "ff1a0cd0-5b8e-4d21-ade2-7f29adf7a5b1",
            "9ce356e6-c0f2-49d4-8a57-e957fbbf59cd",
            "6c8bb16e-c7d9-4e63-ad04-5d7920a8c8a9",
            "729383d6-0223-4b9a-b9da-7ca4c6aafd99",
            "c548707b-bd1d-420b-a134-eded4292641e",
            "06a2466f-fb56-48cc-bee9-4b38fe41193c",
            "55abc335-e646-42ee-b858-d2e37bd749fb",
            "56231fa4-44e7-4920-b22f-244d591b00ca",
            "85d4c4a4-914f-4973-8f7e-f6bb0ae7b723",
            "4e478597-e9d5-4fec-a805-5068390efb7f",
            "14de2efb-05ac-48d1-92bf-33da5b6a7e5f",
            "dc570c3b-d92f-4f52-9425-d4cb90a2d895",
            "1e2fdb57-6889-43bf-9e7e-f40ed9a973f4",
            "6e61632c-da8a-4a23-99ad-45b4f5105d22",
            "4ae1c9f7-4b7a-45a2-b0db-08c6dc3c9258",
            "602e0e94-8478-4277-bd19-3ad7986c3069",
            "f740c545-a309-4a44-ba33-7b0d2419c336",
            "dd468901-2c88-48a1-88fc-5bfe70e806f9",
            "220ef044-9837-471d-8a3f-ab1a02ed1990",
            "88b8e6f9-18a1-4987-9eb1-6f9fad400415",
            "221f68da-3dd3-4984-b42f-ae60a44fd2ae",
            "e3f6577c-8c6d-41af-8c5c-7cbc734eb175",
            "0c35feaf-8b58-4721-b357-7b24fe5deade",
            "64ed735c-8fe7-460e-a239-f02a9925f676",
            "61a6a426-685a-4736-959e-215d70318eba",
            "089b20da-9fa9-496d-80f4-c1d30cd6933d",
            "7c29dbdf-8e65-440e-aef1-22d59a638560",
            "1238cc94-6a17-4426-bce8-3211f740eed4",
            "c145a771-5659-43b5-bf84-a735e3e6a005",
            "735cb760-db68-45a4-b964-4c075937acb2",
            "5de30e1c-0223-4434-9dc5-357e854d34c2",
            "32ae8455-a553-4386-8afe-2babf7934e3a",
            "c8f1fa14-25fe-485e-836c-e51ec933b6b2",
            "8c2e86a9-14f8-4fc4-bcb0-5587adda41ec",
            "3ad6df05-51bb-4250-82ae-0cda9869da17",
            "768d81d2-fc65-434c-b087-f5f9e8ad9464",
            "173a929f-840d-4328-a0fa-ca145e4e0e84",
            "8b9c7197-9933-4b21-ab17-cdb6632e64b6",
            "cd2a6f96-7740-4322-8759-1da0674ee8b5",
            "c78b1a54-a929-4e6e-b952-73cafbf9b7de",
            "8664e526-f269-4153-894d-6f9261e20295",
            "5d23342a-e8fb-470e-9795-665870c90ac5",
            "6381ad60-47a7-4b5c-abdb-3a6decb97aaa",
            "3a776bff-24f4-4d28-bb82-884ce93e7abd",
            "5cf2eb62-bd61-4e53-a9a5-984a976f9980",
            "7369c1b4-92ec-4fe1-b5a2-0c5f43ef0cc2",
            "483edd1a-4d06-43e9-bcaf-34b513b050b5",
            "db5c929b-c069-4922-9182-5e0024930545",
            "060e51f7-21e8-43e2-989b-ea19ac0962f4",
            "b299cb74-678a-4b25-9a88-79733f3baee1",
            "14955eec-019a-4b5f-baaf-aa5d2097d63d",
            "70bb5e4b-997f-48a2-b240-62116ce27a48",
            "94a14cde-a097-4646-b9ce-2f4681e0fee1",
            "5679a62a-db86-4772-8f32-84dfca83a98b",
            "df736110-c9b7-406f-8ce1-51d543ea089f",
            "0b50c888-b57c-4875-a3a4-b4f147042afe",
            "fa6cabcb-8304-4e21-8c70-0ea2f31a61bd",
            "70d2bd72-78f5-4e40-a9a0-d0365ac98deb",
            "6221b936-d7c8-4bc3-9eb8-d0edc7ff0081",
            "a6310267-f2eb-47cf-a96d-fe17340cfebe",
            "dde214ba-54aa-44e9-8467-64a05d15e9ba",
            "be24fd5e-8771-426f-b2d9-c4e66f716abd",
            "1a331942-6aeb-4eba-b663-41b716d796ba",
            "f4f4e587-003c-45ab-8850-a813aedd30df",
            "265c74dc-aecc-4040-8760-c000b9127d07",
            "7baa8e76-0b34-4dd7-b306-cc5c697839b0",
            "94d69e79-8f17-488d-af1f-acef5dd4c307",
            "0f0b7614-a97d-42c6-93b9-88cd903e7de9",
            "66f59abf-9878-448c-bb54-7845840dd217",
            "fb864468-9f27-495f-b762-cf484fb3afc1",
            "ae7a04f8-f39a-47ec-bcac-cd5c84a83289",
            "658e8ab8-6f59-42c4-9579-c287b4691cee",
            "5d179e48-298b-409f-b90d-89e909e9a9da",
            "8b6ffd4f-ddd1-4468-86f5-6d0a079dd999",
            "d1b3b8f4-1a05-4168-abe6-bb5f3727c079",
            "9dc94d15-0c4f-4208-abaf-822f2afa50f1",
            "5de44411-e22e-4ff3-b61e-96a71223e0dd",
            "0e125466-9c67-4221-98b0-7896ce781cc2",
            "2e5d8ee5-7c18-4913-85df-5f4de0232808",
            "1debe9a4-4f5a-4671-9723-e046abaf4d75",
            "10594128-f87e-43fd-a569-55a1e3e1423a",
            "af531525-6d8d-4f17-8256-c01bf0cd4ce0",
            "e9d680bf-e52b-4e8e-bbde-12fe6824f507",
            "c5474b36-095f-4935-a6a1-0427d5f53d8f",
            "023e3752-e57f-478d-b0ea-689382aa0fd2",
            "93a77c00-cdff-449a-8d5e-427f560b4278",
            "c790a097-ed3b-45ea-92f6-3c7efb62455c",
            "75c6dadb-181a-4172-9265-ffa1882523e6",
            "94a4895c-ec6e-45fa-9561-8850b5259b29",
            "cc9d946f-ac4f-4bee-898d-a057a981ee03",
            "50a8292e-5f0e-444f-bcb9-a139456a0fb1",
            "cc9c3c44-b9fb-45f4-a3d5-ddeeb20e1d37",
            "014da261-2e29-4db8-a58e-246560f7d48b",
            "499dd91f-2b10-4c03-b20c-5033d7fdac39",
            "83cef6d1-fb83-4944-9318-28f20edd87a9",
            "e01f316c-4d85-4261-a164-af3deb3e5c58",
            "a8e6237d-e3b1-47e5-8cdf-1ff5bba68600",
            "c2d4e871-8ac2-4bc3-a430-81f380283c5d",
            "75a36ec4-64d7-4bae-901a-fc962cf30922",
            "82fa2f7f-b801-4ae0-9ef5-ca913f70258c",
            "2fd2cb8f-64ea-4bef-a76f-93aa697aadad",
            "263f77d0-1c06-47bb-aa9c-e7aee647969b",
            "1955ee48-0331-456a-b39c-1cda20425eb7",
            "7dbaa8f5-d15e-43a8-a4aa-54daf6e298b2",
            "044aa4d2-8197-403d-806d-54da24f380a7",
            "8c0ec5a2-8af2-48e5-9bca-a52106935ba1",
            "62c31e82-f84f-423b-ac13-927a340c2ed1",
            "5e8448ca-9984-4c7a-b55b-c54b8a27191f",
            "8630766f-d5f0-4788-85b6-a78c0f5a60f4",
            "20b42b4e-cb03-435a-9078-f8700df70740",
            "675bcd09-d087-4ed9-a9c5-843d2918beae",
            "16e296b9-8cac-4643-aa50-f0fc28a9dba1",
            "87320de5-abd5-476c-84b9-3c91df6ca3b7",
            "53b75dcb-668e-48a8-989e-2da2e1f765c1",
            "d8b7a17c-7486-4872-bf84-75c086a0cf60",
            "608c4721-05a1-4500-a3d3-178ce3e76031",
            "00550a72-074c-40cd-8f1c-2fc8dba8fcef",
            "fff6a17f-9916-4f82-9177-f762ef8a8d07",
            "0e5a17b9-c90b-4341-b601-60f6d417b3d9",
            "e29105ba-1028-4eb9-93bd-de6b95a53d38",
            "78a47d64-5a6d-4f51-b417-9e3bcdadd5de",
            "80f30f31-c197-4513-9252-af63c5a0a5c4",
            "0f918638-5902-4f18-a9b1-6282fb375544",
            "9c3e1ce7-7f24-47e5-8073-671709d2f288",
            "32556ba4-1a82-4070-a4ef-0bf6ae1a5dd6",
            "db97fd26-5fe8-479c-af95-cd34f5402497",
            "8090965a-9e73-427a-bd2f-fc7be3d194a8",
            "7640c85f-99a0-4de3-b53d-2bcc541e15ad",
            "565b5a6c-f8fb-486c-b03b-7e5f7335acfc",
            "93154165-fce4-4b4a-9d77-47e76bacd192",
            "3399624c-2d07-4c54-b281-b50d7047b527",
            "66eb0b09-9d8b-4ead-8a2f-8b7bdd7a8119",
            "9ca33283-7ad5-4f2c-8114-5e1ca469d717",
            "0487cfc3-0bb6-4976-84d9-c64f4ec0ca5b",
            "b80dbd08-311e-42bd-81ee-b7fe6bfe5ec2",
            "e8c4d9c2-3ed5-4a99-a4bb-5d335365619d",
            "4ff4ea9b-918a-4c89-8e5b-72dda71adff1",
            "abf79361-bdbf-4ab8-bdca-e3cce872be8d",
            "76eb0af6-1026-40d1-89eb-f07b011bfcae",
            "b999343d-3b68-480a-8105-955862964509",
            "f76e0813-8ced-4f87-8229-aef1322c72b6",
            "6f10c83d-6c4e-42a1-8eea-4428ddc434dd",
            "a301a821-2fd5-4203-acff-cd816a41ea99",
            "6bb6df2f-6c5d-46f8-8c4c-f6c5038a64fa",
            "c8426960-4d17-46a6-9599-a348686b2e00",
            "6423e782-e729-4ebe-923b-a560593ea9a4",
            "4efcefbc-756b-4dab-9d91-23c2d867eace",
            "97f1025c-f9e3-4289-bb62-a6ee07c2f776",
            "b94185c5-3ed8-404f-9cc9-5ab36329442d",
            "a27a3be6-3092-41dd-98ee-8b615ac0a696",
            "877a0928-cd4e-42ae-b582-d57bb28322f0",
            "b90cddae-7a28-4567-91ab-457214a8c95c",
            "a12f9531-0b84-4650-8688-89b61cc41ca3",
            "3d9952f1-0311-4fc4-bccb-f6579798585b",
            "30e349a2-eb81-4b40-8cc8-e2fc0b14149f",
            "ee25bf22-1fe7-47be-b773-52a058d6ad00",
            "f99fbf63-33cd-4503-90f0-94274fb002d4",
            "82dafb2d-bd99-4c3e-803f-e5b2f4af4379",
            "6b1749a9-12fc-467f-91b7-e8ab1cfeeda2",
            "23512346-d9cc-4a10-bade-95b945b9e6d6",
            "f0a1bd30-17f3-4023-83c0-7cb4a6501ed9",
            "46661a07-4b06-4e1f-bff8-078c720bce87",
            "f1b87544-ad44-4583-bd04-2d28cf97ee98",
            "d13cb757-8b46-46e5-8b86-d44a578e88c0",
            "50a15872-80e2-49f3-ad90-eb572e8eeab2",
            "e80f915e-5b31-42f4-bb4f-4d841289fc41",
            "bc11c459-fffa-4984-8825-3c2ae048cd39",
            "6d3f06c9-1c8d-4d42-960a-b999683f0b57",
            "32a430ca-ec0b-4a4e-b717-b9a68f0df0ab",
            "9250bcd9-320d-4f50-a336-c8405cb0c37d",
            "c9092d95-e148-41a1-8ede-326c42246a14",
            "b884f5df-41e2-4c9e-9d7e-aa864239dc36",
            "caa2a39d-1d2b-4a00-8535-45ab2049865a",
            "54ffa866-5122-455d-9f3b-53cd045869ba",
            "588ee638-a9a0-472d-8b19-e95d7661d600",
            "5b49c5b9-1d95-4a67-9837-13b01cbdbfd5",
            "43246375-0418-4f53-9e5a-e8e4c5ed5b56",
            "cb71fcfc-05f5-4c0d-a76b-04bd9910fb8a",
            "4ea92999-99a5-45e3-af65-9edff7981847",
            "3cfd9b9f-7ad5-48e1-9707-429c7edce940",
            "c32fbec5-8dcd-4af5-a2f2-1036c032b4ea",
            "30afcf15-2493-4ff1-8a0a-e0e9dd9ecc31",
            "16cb1658-6062-4626-a396-3ada5b83733c",
            "24ee5fa7-ca92-420a-92ea-a4f07be54cbe",
            "d645dca9-66d1-4d9c-ba74-2e827e3aaf61",
            "c3eef6f3-5ca4-4a3e-b6a5-cf0955302340",
            "a727306a-491b-434c-862d-12751a4f3ed7",
            "4308c9cc-5a64-4e28-b76b-d0e892894840",
            "a6d5b1b7-72c4-4732-9a07-d2afdb0307cd",
            "3a3455e9-0759-4539-91ec-0ec3a50964be",
            "b37c8c04-8f91-4b31-aa72-6e4c51d34ddf",
            "a1f5146c-e559-451f-9ec5-2becd1573fb6",
            "b9c1199b-4b01-4e5b-8cc8-372f24e1194c",
            "42e6df4d-9f18-475b-8b58-6094375397bc",
            "b44291ad-a61c-444d-b47e-b7fead31b63a",
            "cd8832f7-a36e-4441-b9e4-c8c8183b4ff5",
            "e6ca550a-8db9-4ce8-9919-cbebee00ea25",
            "b21ae231-1c7a-4143-b389-4a912280ae2b",
            "3241c531-88aa-446c-b427-35dedea091bd",
            "abb13c8c-9393-445c-9f77-5e3b2d7d2e9d",
            "33de0383-142d-4cdf-8b35-43602ac383cc",
            "c55492bf-fedd-492c-b3bd-a26242e92518",
            "d9071978-e208-41d9-8b1a-c7327411535c",
            "19a4f8fe-1e65-43f7-928c-aa69b411d16a",
            "ad908211-4141-476a-898d-4dd579971f77",
            "17a60920-02e2-43c4-b82d-7d9a11e8238d",
            "d6f34730-f557-403a-8da8-ab54e82de2f0",
            "ad075d62-7140-4620-b013-35f5522dbb0a",
            "a5a14570-69fd-488b-8942-99eb9cb49e09",
            "ec1c75d5-8a9f-49f7-9b7e-99c010c3539e",
            "e3f5bc58-9465-49e2-97df-524433d176f3",
            "8c3d6f51-2d3c-438a-9978-dcae20e4ac3c",
            "8e3cf37b-866f-4a33-8403-afd38cc9a7a5",
            "dd1562fd-7245-4a6f-9465-9b245b445dc2",
            "cda93a03-2c97-4a1c-b24f-d57c72496346",
            "962d1b1d-abfb-4a3d-b3bf-5c78ebfc04ff",
            "cfc854b0-5222-4b3d-9910-5ebed34a60e6",
            "fc47fb6e-b290-45c1-bf9b-7c30ec99559a",
            "57f908b8-4b8e-453e-b350-5995f956609d",
            "7f6da6ca-261d-47a1-b38f-830e558fe265",
            "d0e062d1-cfac-42b1-ba43-84090e1a99d4",
            "9d9f1d82-1376-4dff-beae-ba34ce601155",
            "d6e78bca-ae77-48c2-b95d-993c8b342646",
            "8a0b8616-df13-4e94-acb8-1bcb9df39471",
            "b558d385-f296-479d-b81c-ffb045d44ebf",
            "79f8004d-c684-43f7-8434-b73a767b08a4",
            "90148aa6-ccec-4383-9661-13393b00044d",
            "25fded9f-1608-4250-b2c7-d70e5175cc32",
            "a041e676-295c-4d65-9cab-93acd1af668e",
            "b8d1b984-95d3-49b4-b8c8-66174a1c7a4c",
            "00ab7bd7-5271-4a21-94e9-66b1dd6a1f25",
            "fc0285a6-fafa-4551-9a62-b7a71079aca8",
            "0fe0f910-f558-4382-99ac-961c88f87e3a",
            "a9d64770-8cc6-43d9-940b-95b83727995c",
            "63775dbd-8de2-4ced-a0c2-4ae5c89f3d70",
            "f03b7b74-cf8a-4f09-9a19-19ea3b763abd",
            "cd091237-1fab-4bf4-9fda-e8789882aef5",
            "e3cde700-dcc5-42c6-b19f-ace742d8555f",
            "48f85b2c-2182-471e-91db-80a5e9208860",
            "43c34aaf-1cc9-4773-b4df-5ba92dfbc4d9",
            "9d0a5062-2da3-473f-ace8-20eb9be59b43",
            "3038299a-6793-4b12-8322-58feb841e3af",
            "acc74379-5ae3-437c-b281-863b929eb0b3",
            "e68c2292-918f-4d3a-9a21-c966d362b877",
            "d388c749-3d91-4099-8042-f131997a0b52",
            "c08959d8-d51c-4f40-a9a9-8099c4e97ea2",
            "1a2dc482-994d-454a-b292-64d9e9530259",
            "9d8cf522-11e5-43f9-9e90-1919387505b1",
            "4818457d-6e42-48a2-974b-cc4e31e16a3b",
            "d46ee643-623d-4f4b-a36d-24ce151df592",
            "b4c077d7-4a73-4a88-9fe8-c8718b8bd3e4",
            "18d7ca2a-9640-4ffe-90b3-386b1436e252",
            "09e0135a-2df4-4ac1-9d8c-0fcff9140e74",
            "3cbe9f57-21a1-44fd-a9ba-8286871be49e",
            "980e63a7-5a6e-449c-a199-5449539fe1ed",
            "bf93c0e5-a238-4ce5-9b07-40a6dc95fbcb",
            "fc9c9c31-d4c4-4664-9ef8-fb4f77975742",
            "d3163ec2-38a2-4a0b-8836-313d888fa2d6",
            "f8718cea-76d3-4d55-abbf-3e6d735f1ff3",
            "94d6b1a6-7c88-422d-917a-de1cc88f9444",
            "3305d945-67ab-49f3-b980-3fe881cc1ebb",
            "7d5bdfc7-e443-4fe9-9d1c-98a7beea21f1",
            "8390d61a-6991-4d15-95c1-55d574af053b",
            "f5bec80f-b0f0-4947-991a-5c0cdbb17085",
            "358be270-6f15-49ec-abb0-0b93b65abdc0",
            "6a7d5cd4-7d1f-40db-adf9-a5aee271d4f1",
            "7a03f6f9-84fe-4d81-bb41-a4f2ec1bb406",
            "9507d51e-3591-4819-8d7b-0d5ad7ab9746",
            "e1103090-c266-42b4-ad90-7eeb6dd7888d",
            "af8eb6ba-db53-4766-b07a-b279f2ae41f0",
            "18605519-9a44-4b0e-8d18-973937f4b411",
            "ef0d26f7-b100-46cb-a99e-af350793db32",
            "9a168c8d-dd51-4b5c-9acc-3a222df5429c",
            "08858d47-4efb-43bc-9b4d-639ba192aaa8",
            "18a81059-92a5-4532-918d-741601becc9f",
            "9d22896b-f102-4265-84e4-2abdc4a7ada1",
            "a0db0009-f2d0-4712-a468-296681c33058",
            "1c9a1a15-8535-4120-bbbe-d8e6b3ebe06f",
            "20fbbf2e-d749-46a6-ad44-3434df4cde2b",
            "adc64eb0-0e66-44ad-b599-2081268d8970",
            "00a939e3-352e-4930-af9c-a88f51ee8f2b",
            "4d4afc1b-5640-4021-b7b4-b7cee4e2b39c",
            "a8603dc2-c1b8-4ce1-88c5-adb675d98000",
            "780bcd60-503a-4528-b156-041a4e8b9a68",
            "f47f52fc-d60e-4193-9c69-937e1b1d7ff7",
            "2cddcc29-9c63-48ff-affe-136546d8feb2",
            "5e74b579-13d2-4371-9802-243a36640ae3",
            "fea83e9a-281a-4d5e-a11b-ab501d43038b",
            "081dfb5f-e372-4412-8dbc-8882dd4f25b2",
            "a5349395-f139-4d2a-bb76-cd0280678a19",
            "240f4ef7-e85c-4a55-8091-635727109471",
            "572f9fd7-b57c-410f-8db8-b7414b6adce5",
            "37f46de2-9a93-4076-8190-997a9dcf9aae",
            "c395018f-ef65-4ca2-bab3-9c3bf761039e",
            "02c4d4f3-4025-449c-bdcd-0e2701747994",
            "f08c28ee-093c-49ef-b6ed-e57829197fd4",
            "d373df52-8224-4d68-a8b4-8c7cbbabe5b4",
            "e350304a-069d-4da7-b21b-e5e9ab995314",
            "69cae2c3-fa70-4504-b0bc-0b539c299dae",
            "1bbff889-be32-40ae-8e2f-c7e194b51d9c",
            "6e42bc48-8566-49b8-823d-a5aedb77ea95",
            "066bcfe8-af3b-4335-b50e-dd99ffd1a5be",
            "a86cce82-c1fc-437e-b2f2-fd066a7e694c",
            "f4cf9615-dc50-4efe-9e67-ed0adb1b0541",
            "5a8a354a-2d7e-4241-86a8-6a9afd2bff45",
            "993b73c5-c120-4a43-8183-9b29ba6de85f",
            "fdb41937-3839-42b2-a26a-4f4c66245436",
            "54226905-8e39-44f5-af15-6c981197a972",
            "9ad874d6-9704-48eb-9ff9-e84865e4944c",
            "b45edfcc-92f1-4666-9c03-2d0157bbcbc5",
            "f7dd809d-1b88-428b-9af3-aaecf37bfc7a",
            "3e75b0d3-51c7-41ea-9115-041157f7b938",
            "7f5af2eb-2e7c-4f0b-b63e-374e22bce71b",
            "6f51aa86-629e-401f-9ceb-ece693709ec3",
            "0362ea5d-d489-4015-9f47-e5d77776b467",
            "2d8e1339-cdef-4b78-bbf2-b8eea7a31b8e",
            "f6452219-d574-48f0-90fc-b601548164b0",
            "9aa3333f-0c50-4559-87b4-08c3ff9f2f02",
            "183d7d24-34e8-42d2-acbc-1e5515b9fb1d",
            "f84b07c9-b24c-45b1-a047-1b73dac3e604",
            "96051a9a-021b-4a16-acb2-5e8c64c5d4ad",
            "4e767595-1ace-4240-9fc8-fe4870c6dccd",
            "38a2c636-b082-4edc-941b-1fa9fc7b9d65",
            "dece0520-de37-4116-8091-751b7264df3d",
            "8c3a9c60-baf1-4167-9dd7-b3bee11caf2a",
            "94ce412d-da5f-40fe-a91c-c11870df4f90",
            "4c1bdd85-8d33-4a79-9b2a-ad68c3946ba1",
            "ee15910b-b92f-4909-bbf6-d71327619944",
            "e9f6ed37-51a8-4a4f-af4f-570b50367fbb",
            "5a7237ed-cf6e-4a1c-a271-2d40c37a8c0a",
            "33fd5a0f-7ba3-4251-a37f-095d967f5236",
            "ec14b425-a7ff-4058-ad14-0529fbbaa81c",
            "bc699a28-4fde-47dd-814f-7fc3b87cb4d5",
            "b3e00c85-ee1d-4d6b-9f13-2e7e2e8d3780",
            "e4d13300-0e02-48fc-9783-8334a5f05207",
            "c5013c17-8d3f-407b-b39c-8bf93c30aa9e",
            "3cc3a1b7-8b3e-426c-bfb5-2cc3e9350b8e",
            "085ee349-2314-4760-a46f-e75f2c8e3151",
            "a6b5b2bc-0314-4e81-95d7-981ae128e488",
            "41a5f7c3-2fb5-48e0-92ff-748e4ac3ea38",
            "e59865df-cdf4-4269-8226-f90d1d048cf1",
            "f7e8116d-e9a4-4403-8fe6-33e60733c669",
            "e8fbcb57-be56-456e-b2a9-575058381b92",
            "6ff1464d-ef5e-4bba-b137-85b3db1f84ec",
            "3ec5f521-3b38-485e-852c-4cd917283960",
            "6e533bb9-2b10-4de7-b278-a31529df03b9",
            "f6350607-4be2-406b-b766-4f22038b4d3c",
            "6b671796-1569-42c9-bae1-9754e5c8f573",
            "68ca29ec-06c4-475a-97ca-c25386887214",
            "80cdf84e-bba5-4a3d-b977-92f05888f9d2",
            "ba6b9338-6717-4991-bdf0-c4355290f09b",
            "9c0040ee-2460-49f5-8245-84b778afd66d",
            "065b4350-f05e-43d9-ac1c-6cca4f514504",
            "8c5309bc-acce-44af-9920-2688271f0bee",
            "cb50f3b9-8526-449b-bde4-f3f28d13efed",
            "63719bff-2694-4b8b-a296-ed0b0eccdc52",
            "80b47c85-207c-4f94-87ab-625104f0f646",
            "bcd19d29-df4e-46ea-8ce0-9bfa5a2a8bb1",
            "47e2a232-2807-4dc9-b9d4-3e7e14cf4036",
            "416a0e56-9310-41bb-a61f-dc8df52ec171",
            "1811d4ec-c5f1-466d-af70-b8f4f865cede",
            "5ddcecfa-4a60-49d9-9945-b825bc473935",
            "255bee1e-2495-4540-b6b0-d13462015cc7",
            "c3e05ae0-c151-4cae-bdf0-124b113ebd0d",
            "b622335a-6ca4-484c-8f67-6fe0e6c810df",
            "52f08750-09ba-4358-bd5c-9e26c57e80ca",
            "eb25011c-61a4-4725-92c6-85b7b75af2a4",
            "5465fedd-82ab-48e0-a2e7-f306d55b7f1e",
            "baba0de1-b6be-48ee-b533-faa943790bdb",
            "55bb6a0b-3a36-4796-86de-06fe8785683e",
            "459dcec2-47f4-4fee-9eb6-c3a57921bcb9",
            "480b0382-30ed-46b7-bbb0-a6cddecf2ede",
            "d28dcb04-7bd1-468d-bb84-11acd5c0654b",
            "1ac3a9ef-4554-4a46-941c-760a3c150d9a",
            "92d19e1a-cbcf-4064-82ee-f4a9f77b6495",
            "29fda373-ab01-4026-b4d6-3775edcb9926",
            "34651479-557d-4718-b0fb-82324c24b2a3",
            "09ce9ae3-dc8a-4635-8738-f01cf8f35ed3",
            "37538f40-5a04-4610-90d5-c7073c75d62b",
            "dca6d819-ad09-4689-8f65-34975845cb5b",
            "c25f66e1-a52d-4b28-8527-9b09d6a43665",
            "47bde2e0-47c7-4260-8ed5-01ceec17c096",
            "d470d88f-c7b3-4707-8ca3-3837197dd4da",
            "d8842e1b-0ce4-4c16-9480-fd31c606ba58",
            "8db70cdd-23f5-4f53-acd4-886d248f89c8",
            "26f2a9c8-f3ca-4b10-b8f6-8b68c4e425b6",
            "8258a0cd-a34e-450d-895a-48932ec1f1f0",
            "ddac9623-5ef1-41e0-be52-505a3e368b27",
            "7ba1898b-b135-4c4d-a9e1-743969fa7454",
            "1d2e4be0-a866-4ade-b5ce-1fc6696fde62",
            "be3204cf-8798-4ba7-a9ff-dc1055e81b6d",
            "6b76a792-241a-454c-8884-19a56213a3fb",
            "1915aeed-abca-4ad4-9dd7-114eeb9db38a",
            "5acd494e-3da3-4fa5-af08-bd997e82385d",
            "3d72660b-828b-40bc-bbc4-9e40d918211d",
            "b6ae7996-7818-4b55-ac78-3601ccd992bc",
            "f77f1442-031a-48ca-8ca4-b3e6a35f2502",
            "0a1902aa-aa68-4ced-8a6e-e74f2ae620e5",
            "abaa06fb-b5cb-4515-b67e-b5ad27698dd7",
            "98fa32d1-b153-4f61-bdf5-1eb15090fdef",
            "899dd54a-c0ca-456d-a540-7fdd3fdb2afc",
            "fba6a63d-af1c-4a78-b163-cfd50acaa476",
            "c4b17baa-a715-4cf8-8b18-557e6b4fcd4e",
            "0ccfe5ed-84be-4696-80c2-6d98ba1934e7",
            "a9113f38-fffd-42a4-a144-ca105ce67fda",
            "21909a79-6854-4ddf-a2d3-4028058ba38d",
            "fcba13b4-f460-4194-8eab-382a512c0265",
            "ad4d6db4-2a16-47ee-82b0-b15b544a40d7",
            "6a5ba0ae-0430-47e4-8ebd-4d114da55da0",
            "b15171c6-2f8a-4e7e-9260-a8496025384e",
            "ed193541-c38f-4531-8120-f6edbbb17e22",
            "0fc980aa-d27e-4e68-a833-8d1241c94c7c",
            "d900c186-5cb7-4246-9ec6-585900a3e6a6",
            "408cb0fa-f9bc-4769-93f8-b6673265e182",
            "b9960c9b-c47d-46f0-887e-51fb4b8b65f6",
            "074889e1-ef20-4672-b559-001a2b46cbd3",
            "8e358a10-58a5-407e-9b83-81ee8324991c",
            "0f6de49d-96af-40d7-a8da-0b944cf1a4ca",
            "03cb4c1b-e9a3-4bba-86a7-58f5bccb2717",
            "b046eb73-ca67-4b36-8a74-9d4fe9876c81",
            "8b256171-ccbc-4277-a1d1-3e0d6e592e35",
            "759b4b50-aa64-4a09-80bc-94595172e072",
            "9d718808-fd40-4986-9bc6-ce1160f1208d",
            "0f6db9e5-2002-4467-be17-fd0ed230d15c",
            "7ec43f9f-3fed-438a-a2cf-0413c8cde127",
            "93d1ad06-aa37-40ab-b7ad-e530a57b5fb9",
            "8b7c6c7d-afe8-450b-982b-3af6c225e8bb",
            "73cdacca-ac69-4c09-a27b-db1d7ea12ff8",
            "f292378d-44bb-42fa-a781-c0e7e3b0946f",
            "92e1b056-13a8-4606-8a11-a41a0e547fee",
            "bb5a87d7-8a66-4be2-9904-b16c582c855b",
            "2b14c2c8-8da0-4841-bc79-4947399e53da",
            "1ec22f27-2810-4e47-b2a0-3ec1474df9a2",
            "e4cb9879-abb0-4bd1-914e-f68ce23c16f4",
            "e5b99c91-255f-4f9c-8f84-59c6e328d1a7",
            "aa198810-bb11-4688-a8f3-39ee100b000b",
            "74ebe5bb-82e0-49fd-a51b-dbdf4f37ed1a",
            "1291f3ab-de89-4c67-a723-d0bdedd69f8d",
            "f8a342ef-6387-4a91-9922-e0244dbb6491",
            "1f20dc7d-9f79-4eb1-9077-cffafec82c78",
            "482a8469-3219-48a4-84d7-7c5db3e239a1",
            "4396324a-56c8-423e-9825-4d0921aaa2f3",
            "a2b75c37-fa82-4009-9af7-50791e467288",
            "1e8c620a-431b-48c1-821e-b4b5196abef6",
            "4a055fd5-b811-4a18-a22e-a24ce06fc1c9",
            "f6dd774e-8a95-4e84-b75f-4b654c1dfccf",
            "fcb1dfd7-8611-4205-ac72-7d420beeb490",
            "73368971-362e-4543-b450-ccbf044748c8",
            "fd2fdb16-cd48-4cf2-bac7-0b463e199f24",
            "3bc068c0-3cf3-40ae-b867-17412c2dd854",
            "933aa017-81be-436f-b83c-8c6d9b511147",
            "a6e4e0a1-ec8b-4177-8353-855000d1e5e7",
            "11c35eb4-54f5-4409-82a0-b2da17e2c479",
            "fa51a144-b751-46be-8f6e-fa8a9b30e2f3",
            "41390d58-6dc9-4dc0-9400-4fb28ee4ee10",
            "95aadef4-4a28-46c2-9f93-ba304b34f2c1",
            "c9850f56-46f7-4bb1-a18d-4525c989bc40",
            "b8cc7f13-6f2a-4797-b342-0b56833e3492",
            "00443109-fa50-42fe-b8eb-55f9006e091f",
            "6824fff8-0ecc-46e2-b0cb-4b5b3bf867b8",
            "f590f7e0-94f0-43e6-9afa-45b5d50caadc",
            "26de10b5-8863-4ce6-86f2-5af2975b254f",
            "e13fe405-3647-4a8e-8332-2b24f14289ea",
            "006b36b7-36b5-4db9-84a2-2167a923838a",
            "ce17bcba-21e2-4d38-b761-8f7a1288f95f",
            "f5b060e3-0e4e-407a-9472-61a421f97100",
            "20a186d6-617a-42ce-b1a3-a5067bbc2066",
            "9f2160b2-ab7d-43f3-9c2f-ef9856caf197",
            "7a42b7f4-fadf-4108-a408-e0df10a7ec26",
            "79850e0b-98be-4e45-90d2-b881c30a5650",
            "d569643f-b7f6-4ecb-bcd7-1dcd7d17bb74",
            "da0c67fa-e695-46e8-8c79-ff50e1903cbe",
            "9af32e47-3e3a-4992-9f97-83220caafcea",
            "c47e8d5f-6259-4d76-9640-5bebe9676e68",
            "f3df1d7b-f85e-4b49-9587-0eecb1676e9a",
            "d763afc2-aa69-43b6-93d2-2ca54b481e23",
            "eb713092-4b9a-4c7a-b1bd-79e09c9abf42",
            "9b50b706-286c-4947-afa4-726deb0535ed",
            "6bd1d1a6-2ba3-4d1e-b1f0-47b53d380ece",
            "1770a5d6-a12a-4570-8368-46a8024ce8c5",
            "eb4cdb1b-fbd8-490d-b730-7ef097c1e818",
            "79070d11-6e4e-4189-9106-9ed42cdeb103",
            "09315c88-695e-4027-9fc0-35d3c275a65b",
            "94606c4a-5989-486f-9137-a1acce2d6af1",
            "e509f65d-607e-4f1f-aa53-4fc86f15bdbc",
            "fa5d4b66-cf4a-4c80-b9bd-37a118cd439a",
            "103b5697-b222-47fa-8381-9494a0302d24",
            "e561b778-d005-4d5f-9c3d-b5b5d8fcf936",
            "3b4ad380-ff60-4510-8dfd-760edcabe582",
            "447fa763-256f-4c62-8d62-8ba564c9f77b",
            "8ea81552-1725-4d28-94b4-47e559cb2637",
            "a1d3ca08-c339-4474-955e-8485a566309d",
            "ab881aed-61aa-4841-9080-67cac0d1fd31",
            "e0d93b50-33fe-438d-8594-35319720ad46",
            "db856cef-5fbd-4c7d-942e-0254cc6ee2b0",
            "7a282104-e086-4ad5-ae5f-808e05f69373",
            "b25cc48f-c40e-4ca8-8850-32f48b54a247",
            "bc298931-1f65-4f6b-aa99-7276b1c81b99",
            "094afeba-d844-4d18-9be0-74f9c628188e",
            "2b332638-2f5e-4943-abb9-a11c08d73e87",
            "74ce06b9-0b47-4091-bb96-ca428af08ed3",
            "d604201c-84cf-40b2-93a2-910a909b131a",
            "87dca8a4-e577-45c6-8d9d-f66419f55edb",
            "6b81578c-9335-4181-8591-e930f733f279",
            "58e366d4-06a9-4749-acd4-b52ea19d0ab9",
            "128f7317-2c49-4bb9-be87-9380f43789be",
            "8ac40644-7670-4d9a-befc-62e59452d501",
            "3decc34c-e29e-4ebd-bfef-4e90fe930b83",
            "478ccdc0-0c8c-49de-9a66-10f32e60cd26",
            "345369cb-66e1-4f36-98b2-0975ea497d67",
            "d827ca71-bad0-4863-bebe-8f972ffde071",
            "9fb7e650-466f-4179-82ff-9a2a17993d8f",
            "0a1bb3ec-5895-405f-af87-2c99bcdddb95",
            "9607b563-af5e-4819-8693-ff501d7d599f",
            "0ec2dae8-1d30-48f1-8451-70670861c6c9",
            "8eae85e2-f60d-4b45-9ff0-7f48bcaa5ed5",
            "97aae580-4cc3-4214-ad55-69c0fdd36992",
            "23be54f3-3852-4439-b295-aa431b4602ac",
            "02a28d77-f19e-4504-81a8-46963c7c077d",
            "b575a9ea-aaa9-4078-bdc0-0db194ced569",
            "155aca3e-018e-4eb5-9e60-3dfeb0f86ccf",
            "549ee0da-92a1-46fa-a96a-b11224e308ae",
            "416d7402-4e2a-4aed-b830-a50d03610830",
            "579daa86-ffae-4ac1-ba8d-af1ed79fc43f",
            "d74eae6e-2c1d-4995-98d0-f0c193cf1eaf",
            "aef6c831-60dc-4b9c-868b-8b88b2e03da9",
            "d3f274a6-a216-4b55-8401-3dc72ece69ca",
            "be8d6911-4de0-44b2-8636-b84e541639ce",
            "08becfa9-9b92-4bda-8c1b-60348aa18497",
            "0134fa5a-c683-431f-a31e-68a2546d24a3",
            "a3ddd9ed-d5f9-417a-bdba-e6067b2f4e8d",
            "23be8c6a-a250-450d-a59c-ebe3f180d304",
            "78ee6d0d-eadd-4775-b972-24e13b71dd2f",
            "ba19df5f-d0d2-46d3-b842-a211c1b82f6e",
            "ad1ac375-da52-4da8-84d4-be80860407a2",
            "065d658c-2bf9-489e-bc33-9338a34f1b0b",
            "9dad6ee1-e870-4426-bf84-3a60d01c3432",
            "9b5f4280-c5bb-4ed9-9782-de374a8482ce",
            "d58a5027-f37b-4dd5-a9c8-05bca108effa",
            "5ba6e049-5b65-4f06-83f4-e792c8f1fc78",
            "8d21a432-39ea-441e-b694-17b5dd0e5dd9",
            "69f27ce4-dd32-459f-982f-47a6ea36bef7",
            "13854075-9aa0-4645-b52c-2e906df7546d",
            "690a4995-19f9-4080-98c2-31befb432016",
            "ec708c23-379b-4138-9432-b2e1e9444cbb",
            "22155ae0-7dd9-48b0-ab9a-4a272dadc87e",
            "8963a033-2b45-487f-8a3d-e68a99f7a443",
            "d6ed6d83-3cac-4ff3-86f9-12f1f7f4dc0f",
            "e6839279-1494-4488-b1a9-675357e2ea2c",
            "ae39ce2e-0879-4e75-a239-5b4745fe63cb",
            "9451d299-2b54-4082-b225-34cac6073044",
            "3762d7e2-7787-4007-8146-c0b7a7e57601",
            "179ff5d3-eca8-43f7-9793-7ea73e646e2d",
            "3859c66b-0d5e-4663-b953-4521a091cbb0",
            "5ef0f120-24a3-4ba3-b546-68f0b4535938",
            "599f868a-86c0-4b1e-ab12-edfb0b477c9f",
            "2d9a26a1-7e64-4f35-85c0-adb7b2469898",
            "8ca7a601-afd5-4154-8b91-79492c4b0a2f",
            "b0ab98dd-e2c6-41e2-901f-9dd9c90ba802",
            "d60cb08c-a7a1-4bf8-9f4d-2c703c98ec4e",
            "602a652d-9ad9-458d-a92c-8fd07da52b96",
            "55dea8a9-8ee0-49e6-b57c-8aea629eaa92",
            "adaf41ed-5a80-405b-952c-78e91b7b5ce9",
            "3502f733-e811-46fb-b96a-5b8cfc49d555",
            "8a945d6d-c53d-400e-8287-c2d619fa22bf",
            "1eec9041-7634-46cd-9c17-cece19375bb7",
            "7d62294a-eb90-4505-a7e3-4483f2737ff8",
            "e3bd3893-a317-4612-a3b4-a3bd08a74d8c",
            "24256cbe-c807-4af8-ae42-e15a582cf4ee",
            "fa82e611-37b2-4851-b7ac-2ecab08ef763",
            "d4e781fd-ed77-4abd-ad04-16e675fc4f15",
            "fef58fe4-4bbb-45bc-811c-9944b0b8a0e7",
            "c35ca127-10cd-4f0f-841d-6649490c4de7",
            "01ca5cba-3e9a-47f7-a8d0-0004c44670c7",
            "ba2e9b35-7914-467f-a107-77ad3fab2ba0",
            "1aa2ba82-7440-4fd2-af72-63b5e7885f92",
            "73895cb6-bbe5-495f-bc21-2754cea1cfc3",
            "ec37b12f-5aa8-409f-9621-fe83665512c2",
            "6555e765-a56a-46a4-a27d-d38b0c2d8843",
            "c4909d95-24aa-49ea-ab8f-f890af3400d6",
            "4d14f96e-6445-4940-a923-254a0d974f82",
            "b5644869-c319-42d2-b098-bfb228984757",
            "e03f4226-b134-48a1-87e9-6b04cdea0013",
            "5b4cb7bd-29c5-4a04-8016-c19ea2685794",
            "6b24f273-af2f-458d-bb47-a739902131c4",
            "d387e5bb-3ca9-4a8c-a164-dc257a0044bb",
            "13c1f44d-bdb5-413e-b972-61f0982ccc61",
            "2b139d5c-ea51-482f-9b93-271d7d94e5d6",
            "07562461-12ca-4fa4-b310-16f44cac13de",
            "9511ccc5-fb71-4023-b888-0d7b05c9d274",
            "0e35e368-d338-41de-88cf-cc036d347bd2",
            "3a214b00-2fc4-4f87-a8c2-ad91fe35483a",
            "57174297-ec98-417b-bdda-09e6f17950a0",
            "b12f324c-4b66-4a6e-b5e4-39227a87453b",
            "c40d3dff-2544-42af-8090-406d55a06c06",
            "5ab01744-2238-485c-94cd-69ed86a38b0e",
            "bd7e419d-cc7d-4bae-9e43-2fa34942ad0b",
            "f9b7001c-3f53-4efc-a1ee-ea14f00d24b4",
            "e341a0c2-5c6d-4e14-8bae-bec4701a4b4f",
            "c0066b2a-3c2e-46d8-9fd4-aad0d8f56afd",
            "bf99737b-3a7b-43d8-9c47-84c3c940bb61",
            "d3b84902-94c3-451b-a1cb-104db5b39996"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1313206,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}