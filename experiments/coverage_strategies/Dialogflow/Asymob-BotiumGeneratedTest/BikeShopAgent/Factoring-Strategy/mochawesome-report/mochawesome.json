{
  "stats": {
    "suites": 1,
    "tests": 620,
    "passes": 620,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-15T00:37:28.923Z",
    "end": "2023-11-15T01:04:12.221Z",
    "duration": 1603298,
    "testsRegistered": 620,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c6fabca7-b8fb-4d15-9137-d85aa042417c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "18bb3340-509e-4f46-b8fb-1c645948439e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "b5a713fd-feea-4839-b28a-994374d7bd3d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "b5f52125-b53c-49f9-b914-334e51bd0950",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "7034aa2f-502a-48e3-b493-12e1dfb98c5f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "TC-Hours-convo/HOURS_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L1",
              "timedOut": false,
              "duration": 1200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: When do you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "16b0291d-365f-4b54-89f9-d6b42025bd3c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Hours-convo/HOURS_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L2",
              "timedOut": false,
              "duration": 1149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: What are your hours?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "72718934-3f6b-4a00-9152-d2144d5094fb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Hours-convo/HOURS_USER-L3",
              "fullTitle": "Botium Test-Suite TC-Hours-convo/HOURS_USER-L3",
              "timedOut": false,
              "duration": 1044,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: How late are you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "62cbbcf2-e5cf-49a3-8525-4786028315dc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3727,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ba5ba077-7ec0-4736-a2ff-28fb5ab0331c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "336b2a66-081b-45a8-9302-c020645a8bd8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0d81af31-65dd-41d9-874b-e15e83a0f58a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3385,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a8fd2b97-f28a-4188-80b6-2821f720132d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "47d72fd3-3d60-42b1-8c3c-03bb87ca1d6e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c3ee60b2-0333-4195-bd9a-e08c4055218b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bea7d844-067a-485c-b26d-54f92f275f82",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "41c3b89c-0c44-4fa8-8adb-1225de460f89",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2981,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f935fa02-61f0-4026-82cb-12349f22b00e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4d0e4630-a598-44ba-a8a8-0add01cc8fa9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "48652974-41cc-4197-805b-3ce4741c4231",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8edc5ec0-153a-4448-b338-e425014df0d9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f9d7ef5c-8649-428b-b725-a0cb19d7cee7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1d71c2aa-5cef-461b-92d1-78920fd68a39",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "475cda6b-56ae-4bb9-bd50-b1479262df66",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "789c71a1-47fe-449a-b9ca-a898ec6aa796",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3081,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "882313e1-1228-4355-8554-510b01e5a71e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3096,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "486fa567-b9b4-407c-897d-7bc0ead0255a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "377d98c0-d6d0-4ec7-9a18-6ee73a983873",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3094,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e25da82-05c7-403b-a8a7-ba49d5b972e0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2374,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dc8e9a5c-8bb1-4884-943e-9c5d8577ba01",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "01068587-9a20-4e98-b7da-8a69e0f614f6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1cf5ee80-1dd1-4d6b-b257-a51a7ab5a246",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "72d1bdda-d905-496e-8740-dfbf0dde8b9e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3e9d07b1-ed43-41a1-87fd-f075f6ff1de6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c09c559e-ac9a-44c6-bb77-9bfc7ae5199f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6e6e9ad8-66a6-4d37-95d7-82d7569d8e97",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3675,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dd150ed3-5a93-4659-a890-da441c83c307",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2768,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cda06ca9-7f56-42a7-911d-f9741d2ce51c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2898,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "73285176-c619-40bf-8d26-b298c5fb0856",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bc8d4434-90cf-415e-bf09-784311b945ac",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case0.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "01592958-c2ca-4780-92ef-f86dd4492d0e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3380,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3f627edf-f793-40f9-8651-d816445de08d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7d8ce74e-94d4-4160-873b-60e84e8e6fbe",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3046,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c19881e8-c470-4cc6-8738-7d592fe5fdb0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dde813da-b39f-441d-8503-1bd130349926",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2822,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2f8f680f-2aec-43ae-89ff-636a37baaaf2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2903,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1c5d3702-f71c-4317-a108-09c095eacf6e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2841,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e7631f0f-740d-4428-bdf4-49b7cfe6aa12",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7b40c529-8c2c-40ab-9644-a796a8d8f054",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3403,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3c650b9e-c3ba-4125-8f40-0e08412a0806",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "913fa68f-e3c1-499b-b326-1a4572dbf332",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d502fb47-622e-4980-b4ff-ee28682c7384",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8ea27b58-3f05-4507-b805-ecaf45cf98f3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "26626e0d-e7b3-4802-8ac2-fe3557bef96a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4a78d57c-2ac1-40e6-a82f-00ed47f8a7da",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0f5f13d6-c7ed-438c-990a-cd8176c6fdbc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0432fea8-fd99-4a71-87e0-f64e53e13be2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2836,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "044a922f-b2b2-4043-bf35-b063fd8e38bd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b543bba3-3b4c-45ed-af1f-42564fa09662",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "92e93283-2b3b-4880-ac8b-f0512280f64d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ea8e3816-e8a8-41ac-8cc5-e7fd3e64f252",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2913,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "59f668b1-3111-4fb8-b5b1-0b5a4835f5ff",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2966,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "63ffe66d-914a-48c1-b49c-5cda8ed02680",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "14a8a8ff-8c2a-4d2d-bb71-cfcde966f234",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2e909086-586b-4cd6-a2f2-0067382873a5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3088,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "64b832c2-cbd6-4299-bfb3-130985f926fa",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c9783c86-6eab-4d62-bc59-dfbcbdc477ab",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "872ee370-74fe-41cc-a34b-320a9b663e82",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3752,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e833496f-b04e-4be7-829c-3ecd867890c1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b946bf90-2537-41d0-91cf-6c786cac54de",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3079,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "90d31ce4-06ce-4165-a432-d478fbc8b7a1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2843,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b72403c9-502b-408e-aac8-42ad7060fd22",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case1.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e11fd77b-6828-484d-81d5-76c3193325bc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e497396d-cfef-4829-9ad5-5365a21fb0a0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "07e33f8f-f012-45ce-8017-b05a60bdb243",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ec4d54c-79e3-4263-a209-bb157e81a7a5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4219a329-ba96-4d1c-9b85-1f7527389a81",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "46459420-be40-42d5-97fa-4add89b8ca17",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "910e70aa-ff3a-42c3-b861-988f214ec6fb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2937,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8bbadc82-a8a4-444c-b8d6-1b62cd33d6cd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "41b8ebfb-12b5-4052-94b4-dde63921785a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3d22ccae-ee5d-4b8c-ac3e-446322bd9189",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3457,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1c24c3f6-090f-44c6-873d-686908964a34",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3b7faea2-a67d-4bb7-9825-737990d3dd47",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ebba5ba-ab8c-4bc6-819c-b296e08c327f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "96f02f14-2d39-40a2-9648-3f4f8f0b2b27",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1ac30d1a-6579-4853-b190-599604780596",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ca84d269-d5a1-46ee-811d-9e85a4815086",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2857,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "608884a0-5de1-4434-9f21-ca1f082200e0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0c14edc4-3896-4a24-b1de-bb964512239a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cc69d31d-94eb-4e8e-8117-92667cfe0a9b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "402c2480-db61-46bd-8e49-836fa7527d51",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "68216965-b372-4499-b048-ca9b6fecda33",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c3b883cb-aa7a-459a-b744-e783b1af54d2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "21ecd729-6cbf-4839-8692-87fafd074b3d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2851,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ac41c4b-bd99-4b80-991d-673f973b1848",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1f84944d-9659-468a-bdca-eed6777f8e65",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "99315bab-8c2b-4f6f-9ade-e028c9a60441",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3014,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a19423f4-4643-43d4-8284-2b9696965d3b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6a0cecdf-8023-489c-b3a7-8c655ac7c772",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2984,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b535db51-0c9a-4978-80b3-a5443da5d375",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "790856c3-b435-4819-aa8a-ff4770198f0e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2636,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a4ddaeff-0f6a-4f06-ae18-505e9ddccb55",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2772,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e77f39a2-f384-4b6d-bd41-145505da9cca",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case10.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2922,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "eea6fc2f-6578-4a3b-b231-d7632c0fe051",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ece6dc2a-2792-4b7d-bc1f-f3b8f9ac8e49",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d426fd69-edf7-46e4-b2ac-6c632b9b6b27",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "51644253-d1be-4bea-b125-8fb5f0310589",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0671a72e-7cc0-47af-af09-50f901ec336c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d7afb0fc-8fe3-483f-90a4-45aaa48b9a4d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "84f6d46d-fe69-4ca1-b3ff-b80bbb3986bb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3083,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "756c311a-b372-4fa6-a023-c972308d8b74",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "356b594f-ee49-4736-b8e9-ca22fe711a86",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2948,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "66b60647-46d3-43a8-9296-2e69f5078e26",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3086,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "86fb78ad-6c66-45b8-9bdd-09b12f06ea98",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e3ae7800-4264-460c-882e-9fcd90977efa",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d832636-d581-49d0-952f-102c4dae3397",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3660,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "420773d0-9306-4dc0-a5e6-aaefc0ca8a43",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "564488b5-06b1-4cf4-9fe2-ca04e95df069",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a34e1b37-8acc-4f43-bc0b-55b355db3861",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "28ebabd7-94f7-44ac-8033-41bdd412e01f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "11487b7e-2c07-400e-bf9c-c024177fa76a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3502,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "26cc401f-0fa8-489d-91de-bf3dbcfc24aa",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3079,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f8c4ec67-e2dc-42e5-a493-35bed260bb33",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2585,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "58f79c6c-80a4-43b2-8eba-10c5c4206532",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3294,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b0ae49ee-d620-441d-b39f-fcf998b56e8b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "57e8942b-65e0-4b43-8f45-91c3a1e2ffa7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3387,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "26b7211f-56a9-4ace-bae9-404c5177a017",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d0ae379d-6fef-4656-8cc9-fcb36fba1416",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ad2d5a38-c657-45a4-911e-9ad6eb646a61",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2999,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0f0f8e15-f0ed-49a3-a29d-f78f7286289b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "89dc8389-6520-42c0-b587-67e54446411c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2948,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fb744773-f1c3-4ae3-b03c-07c3d932f488",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3018,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "89b3114a-7516-4619-b53b-d4305f8ac86d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "086ccbfa-a35a-4691-93e4-82e550f52100",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3090,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c9081939-8a5d-4b77-abae-4ed6a6749425",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case2.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3084,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "38feca3e-829d-40fd-9c93-b9d356f749d6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ced8ffed-5448-43dd-91f9-7b4a4d2b2316",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2740,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b7323c22-439e-473a-9180-7b5097f5c649",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "20f4e12b-5699-427e-a3e2-43a684acb377",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3022,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "95f741cc-d12c-4175-a652-ecdc151d4c79",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "57fa2ed3-d8d6-4810-be6c-e34c22234c8e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ec3e6bd4-a51e-4d99-af21-92e32b995a3a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2392,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e1341629-e8c3-42ef-864e-d549e31a6896",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dff12bae-fe7c-49e6-bb41-c113ec328461",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4df8a279-2c78-44ea-93f3-a8655e40e4fc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "edb7b5d2-930b-4c27-983c-4088dd96bdb4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "99d4e2d1-859d-41b3-a5dc-433036c88288",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2851,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9c254c64-558b-4993-8f73-0b0dcda8160d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ac035eb3-8f8d-4b6d-92e1-1f194681216c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2921,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fd15b219-6afb-4908-812a-1ff156eea37a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2a32077b-7c63-4a8d-a052-69d35d595832",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "203598f7-93d3-40cb-adf5-d6b2f7840430",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3431,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "74de245a-5374-4792-936a-db03c40ee562",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fac203ad-03dc-4ef4-b748-fffe44fb4c35",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e220ca03-e2ae-4ae6-b32b-b8b160c09f3f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2621,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e44cc67c-9d05-445d-a042-7827419b06f2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2623,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c447ef84-6d37-44fe-ae00-88d6a60c9e8f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f266aea2-1882-4ef9-8a4c-ba44339fb026",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "85fc0322-b034-4e84-a2e6-12f131f24c7e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e79ad365-99c4-4b28-b52a-853eeaa8aa09",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2992,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "01075092-2f8f-4895-8baf-a280d77aaf2e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e21f7046-ed2e-4e09-b711-2145ce636a77",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3394,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4de7111f-40be-4619-99f5-dc57452735a7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3079,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "431ff1f8-2a43-4309-86da-eea678a2eaf5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3575,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f921734d-62a0-4f5f-baeb-0d18c3846875",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f14370ad-c9e2-4887-84a2-ed57a9bd300f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "93ffbb14-4f6c-464e-81be-236b913d98b5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case3.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d60f1958-b42b-4776-985c-d0c8b9d47c28",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dbf06998-3d83-413c-bb18-08fe1cd40b85",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2920,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ece6ca4-5c0a-4665-a2b7-c15ce416908d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9fc2d7a4-6213-42f8-95ca-0b4b24136b81",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3099,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a7fcc79e-98dd-4393-acec-17d2496831da",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d8958951-077a-46da-a282-c83e98fb0b08",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2737,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "50c5a7aa-2a96-4053-9b8a-900cd938b0be",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2839,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ddf5e99e-a277-4979-8f34-e365541e096d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5a1a0c77-c6f7-4317-a915-2f73903a89b6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3285,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cc153f9e-af09-461f-89e5-a31bdd259d46",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "abe50b63-5215-4792-80e2-9eb73a061d5d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "77636a50-4c3b-4698-8de3-d8adfc2fe7a9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3441,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a8df9505-21e5-4326-be9f-d82e50a51ae1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4028e8d3-7cbd-40f0-ad0b-70d313f8c054",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e748f0fa-383f-46a4-8b94-3792cee2356d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3cf08088-81dd-4aca-ae02-15702c7987a2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "245b23a1-6ac1-4d83-8671-734c07859d8f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3051,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "12768f28-15de-4ccb-b876-3915316d5ad0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "deff8d6d-6e53-4ae7-9de6-149ccc67b79e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dac9d4cd-e819-49f7-b226-0c25d17b521b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e6d95b5-1fde-4c2f-b02f-d91a382125d7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e731dfec-6d88-40e7-8a68-4f3bb81e911c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3086,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "652b29ab-e824-4ee6-b1fc-e7068719b972",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "97e3bf31-1d77-4b77-928a-7d36cf722762",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1dcb5335-0582-4d7b-bbb3-88abb04264b2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e33ab122-5f61-4ad6-83aa-9e97c525034e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "33baa939-4f61-4f6d-992a-d2f066c1e0fc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2837,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2ebb3981-77de-412c-8f64-3e34a0aa3385",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3063,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "82f5ad1c-82ea-4f56-9733-d44b1791ada8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2707,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fc919998-112f-4d2e-b1cf-51c0fba39ddb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2768,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "38e56483-b847-4c77-9dcb-641cfe6363e6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1a29e92f-5d42-4cc6-a7b8-76678eacef47",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case4.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "249b5b47-8442-45c7-84fd-5cc5e6bcb135",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ab6808e7-862b-492d-9a3b-7a0a398036d6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2937,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "22f8d309-abfb-4c78-952a-0e61e9f23e15",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d4c4ba3-ec2f-4f51-b8c7-2e69542d1656",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1ad466db-519e-4c12-840d-7ad612472c52",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c7fc7dac-d330-4c12-b3fe-8286dd7a8430",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e4ba717-749c-4b30-bba3-df279c9f4551",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "595e17af-e4b8-4697-a83e-727732832150",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b5d73a88-e9d7-4a03-8952-885ed08d2437",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c54b906c-4335-48a3-a710-02463f5c76c6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fc93bc4d-d855-440a-acc7-ba08b042fef3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "39ec06ee-991e-4e9a-8f01-5e0d6b3b5d01",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3471,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e570583-8691-45a5-b9b0-b01c1a836205",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e1408533-385d-4964-8141-05ddc4d5678c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2831,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e5b11403-46bc-4a88-9591-4706b115f69a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3068,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3a6654c1-bcd8-4936-a94e-d9ba7769cec3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "412de011-7110-4b7e-acb4-efc5673e7fd7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "31502ed4-a129-44d3-88ad-cfb8d3c6efbb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7f52c106-e0e1-46b9-ac88-72d36aba622f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6ff6f247-0ee3-4d09-90cb-158fc04d714b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "94e715e8-4f5a-4c9d-9530-c89b63e7852b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2478,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2949ec6a-1474-4dc5-af1d-7df5a18052dd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ed3c3293-5f49-478d-9f51-9e45ee6aa8c0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c7872ba-946f-44da-9e7d-441efe07018d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "066654bc-deea-4e94-85a1-9785da6f8b25",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b830ac2a-a1a0-4531-bf6b-489bd1de6ee1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9f5efc60-feb3-45c2-af21-6727bed6ce64",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "15b65351-0578-4e9e-99a0-e4500229c4af",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d9f99013-3030-410d-94cc-9cd4f7780983",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3a7128b9-f8ca-45da-837e-0de03f64c964",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3069,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1910b0dc-bb85-457a-b07e-1b0414404405",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2757,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6aa684d3-d886-4e2d-88c2-fbd9db7d9d5e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case5.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5289dbaa-2aa8-4a31-a158-a6e79b1e6b00",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0e2c82e4-2ebd-4c40-ba91-24a22a32798c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "01567cdf-748d-4441-a627-1606176f6976",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e3133a97-54c7-44dd-acd9-a83bd293e47b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "db7ddc76-fad1-4d0e-9a03-304a25b273d1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "05078be6-cf08-4aa3-8e07-6a8fc5f21ae7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e84b4a34-338c-4be0-8de9-f4fb46138c76",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "048078c8-ef79-4661-8d1b-51bc87884dcd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "621d0f56-c6f1-4ae2-938a-886fe0e685c6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2834,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2ec15a2b-15b6-4878-a76a-43ba3bd7cfd4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c1c25519-d29e-4f27-a7ae-1b9d94de54bd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3e990e99-c5c1-4193-bbd1-5f9d8b752e40",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a42bb2bd-497c-4037-91e3-65390361058b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a2378a3c-dbb5-4dc7-9bbf-1d88741ea939",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "78690ac0-f857-4ae3-a3c4-4021e78aa9c7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9ad2227c-3200-48f2-98f2-93ca8d68114e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "79f22938-3413-4f31-8d2b-69204dd9286e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a9d6899a-bec9-4167-b732-abbf9785f654",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f34ffef4-42d2-4745-84e6-c7c68700f496",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c00565cb-c749-4d26-9523-3542b34fe203",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2920,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ea77cb3-7a06-42d2-863c-2e3513c3b95f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5e5bdbf5-1126-4d37-8f1d-2ed4b2335ddf",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2cc541ca-a2ae-4bbc-ab24-29bb52da4c45",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c55eda16-1ce9-4b6e-94bb-20ab474de22b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3543,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "aa7e9d29-c1ca-4745-b035-c0be6b1c8555",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3047,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a3824659-9398-4355-9427-38f25c2bee55",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "effdb46c-7391-4c2e-95df-817fd1910c81",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4dd746fc-ac63-4230-a2a7-04b95c5f860e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f08769a0-0118-4c37-8fb1-1e73526ee338",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bbc58a4b-7515-4138-8650-d707beca6b7e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2934,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "61f9238a-b9e7-46af-81ac-a6547aa9769b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f9ccd5e5-0210-4d14-82de-ba6bfb64bab3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case6.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2884,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e67e6589-6ae2-4ed9-8dd5-e1c03afd8564",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3c69e2ef-1af8-45c5-af7d-eef8496adf51",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f3e8bece-faa5-4b8f-a503-743711e57f0b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3502,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6faa3bab-188a-4a5c-b984-3e0788f4efee",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cad68842-e9af-4a44-a8e2-104d6433a3db",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2819,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "389c4b36-c56b-4d45-8701-5069142c6791",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2b1d6b36-c7ae-4b5f-a50c-80c37384a1c9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c13fa7ad-017d-4480-b53b-89f806df6ae2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "43bb9e78-d2c7-41bc-a2fc-98b67fb61041",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9d9ea330-0753-461d-b5f6-8372359404a5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7260e198-e3f6-49ac-923f-3f80a5b4d6fe",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a304bea6-2ef5-42c6-aab9-8ea2d44b497f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ca15f26c-8d71-43be-87f2-63484922b9f5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0fee6a6d-513c-4dcb-ae7b-916eed24a287",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3385,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "81c4aa75-011f-480a-a990-554d265e4508",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3025,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "834252b6-4393-472f-a72a-506286c64939",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "503d378a-68c5-4166-90c2-2bfc62091777",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2758,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e30c81b6-acdc-4834-bed4-d5d4aaeab3bc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3287c77f-3acf-4a34-bc3e-51a548415a41",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3056,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a73f382e-1809-4959-a228-18936b3cf12f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "23ca8fd9-d0c5-4014-b2be-6de432f9bb20",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "794fafa1-54a3-4bb1-a58a-6f34f3af84d0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b26c409a-0d78-438c-9fc5-ca35b2b55e6b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9975e63f-146f-46bb-915d-ffc5c7f3b6d7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "80693af8-bc35-4723-ad1b-603e8437d066",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dc6026b7-38b1-4cf8-9f32-c3e048609a6e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2614,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dcfb3786-d69b-42b0-a67a-c9f7fc10b0c4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2d834698-5c80-4169-8af6-da9dffc5ac63",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "de63ee8f-ff12-477a-850e-2f24c64eb22a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "30dd328d-a130-4c6f-94e6-073e3bdfa7d3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c58d4d22-0672-427b-b973-a808d93b228f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2862,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cefc796f-27cc-4c02-bc15-95f6b6d95ae1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case7.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f2c0dcfb-bf51-438e-adbe-cb51d5bf59aa",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9c1b642a-184f-4b93-a985-61d1afb87bc9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "82f75bb0-ef61-4d5b-a5a7-1587b3bc073c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c70dc29c-d2a8-45af-82a6-0a48936153e5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2714,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "132a1d9e-2b29-475c-8cb2-b96fb79244e0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00c73690-5f9e-4125-a6fb-eb07f3c86115",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a3d2309a-6c8f-444e-a361-87ca8a12abfe",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2836,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1372682c-3fc9-4bb1-83de-9a8eb3b19ccb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fbb31c7d-86ce-4ff5-8a6a-0268156ef37f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2819,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "04422ad6-2b95-45b1-b031-902ed7c91111",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2727,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "facc260c-8350-41a4-b535-b5b9866b3b6f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4a48f0a5-66dd-412a-acec-5f6bcea6181c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5ec1ac3b-8c2b-430d-b325-243eda0ee91b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c905e03b-eaf0-4170-89fc-4a07769dd1e7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9c569846-260e-445d-b474-29072f152c88",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3075,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c56217e-d80e-4b54-99b5-9f258235c682",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ab87840f-bc63-4562-b4aa-66488bb28e06",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "01a58546-5ae2-41f1-a32a-f7c93fb725b9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ad8525f9-3721-477b-bb12-809f5db0210d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bcbce674-0835-4e31-bbae-883c32b89d8f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3017,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "51fb8890-4331-4d3c-a886-5fbccec6b261",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ed23ec05-2059-4bb8-88f5-e1e6f95bbed1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "11650b03-5955-4cba-9624-cbd3d78d2424",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2850,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5e66b0b8-7d62-40ba-ab75-918d9543a123",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3346,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3352f79c-8e53-4ac9-b688-2a59d9d0c1ed",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2917,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "77a0ab82-5bfd-4bc5-bd10-4540b88d6ee8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2455,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "07cced45-b805-4ddb-a3bb-0e214f5859a4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6877c0cf-ea99-44c4-9f24-1d103f3274e3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2887,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5132c529-847d-4e0e-a39d-2950fa352f57",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3df20498-9e9e-4064-95c9-69c75aa58fb6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "979eb66b-f221-48ca-95d1-4a00ee8a195e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "79c872fa-d3ba-44a0-99e5-b5427536f378",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case8.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4d889009-a9ef-4b03-9ed5-79675391376f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3066,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e7e6034d-41aa-477b-8e4b-3c7b924d4013",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2615,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d33905c4-f254-4ede-8125-b4ad6f0afdf2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "86dcd896-38dc-421b-9bc3-2657ebc9f405",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2845,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4044a886-acfe-4bac-a87f-8faefb433809",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3614,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "44df852d-4c44-48ac-9d7b-46fb770ba19d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2845,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "82e4e041-945d-410d-9fd0-7cf2c5dc0660",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d20e4f88-2566-4e4f-835c-a4f7bcfae454",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c9fcbb4-68cf-4d02-8222-da55d0e08f10",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7846e6ef-2e20-438e-9e6f-6e7e2bb8a470",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ea88b4c9-8340-4f02-a094-c2a20d6920fb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d89a577f-63e5-4846-a93b-cfe8d515f8de",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3156d1a2-1c7a-4318-8bcd-6e8a01975e76",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3a10692a-ec5c-456e-91a6-422711f4392b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d4304c9c-27ac-4cee-a33b-e66426294653",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "05c0a677-31a5-4639-ab67-8e529cbaa182",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case0.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3092,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "76686047-c558-4a26-bb99-123965d7ad27",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "24194a6d-7ece-4819-afb6-8a579332b412",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9dc30f69-db83-4154-a003-23707570af07",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a9da476d-6490-4533-8902-f87b4f9e3e3e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b868cc46-0348-43a1-8c3d-bc9bf7bab3cd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b464245f-c091-4a35-8cfb-6dedc1da2d29",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3605,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "60f679c9-799f-47b7-87f9-c4fc429bf8d5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3b9ae21a-a4a5-401e-9c29-aa7cd00d6a02",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case0/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2736,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9c38d96b-9840-479e-b1ac-2da4af7c7ac5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8bdb50e4-0560-49ff-86d5-ab776149e9a4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c9050ce-12f7-407a-a2da-065f95d93c1f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2921,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "edaf15d9-eb97-49cc-bee9-66ef6321955c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8a928416-90f1-41e5-8dd3-718a36378241",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5bbe29ef-55de-43a1-b114-01f80c7b6ffe",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L3/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c0ba0bdb-e2a8-43b0-972b-2d8f3808d01a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 3032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9653e9ee-72dc-4119-831e-d7d9c8d45f6f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_00-!Make_Appointment_-_custom_1-1-convo.case9.case1.case1/MAKE_APPOINTMENT_00_USER-L4/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 3231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "589b4801-6a03-4747-9283-537d372980a5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6032f328-3b16-419a-b8b7-7b84a67beb07",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1682,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9b25ee35-5774-4588-8275-327ded31e6bc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2553,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "695b9932-d3fb-4b6b-bba1-988a83e78e1a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1704,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c38fa573-e7af-452f-a509-0abb5358041a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "aec8c166-8991-400c-aeab-49ba50ec4fdb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2390,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4c292290-6bd1-4947-976c-1de45088a3e7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8b8685f9-d8e5-4876-9543-ed13ddf1a5a9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case0.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2812,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a86880c6-da3c-4964-8c37-acffe8a7c889",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2364,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1ed8aab3-65d1-4ba8-971e-43cab03314df",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "38ddd060-67eb-43f4-aa13-14aeae3304b2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a1b3be91-cbd1-4451-ba48-537cc44575c7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2294,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e20eb4b-8e32-4414-a581-0e9ca5878df7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f1572e5b-2c60-4617-af67-e67fc7207899",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "851fd177-dd9b-4a17-9663-6697491b1327",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fe64d787-fc3f-4d2e-a849-a253f1c70e57",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case1.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "058bf741-a4b8-4e9d-bfd6-aef72489c720",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "60a927b9-51cd-4831-a5bd-9798ba6feea5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2491,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1c021f2a-9ed8-4314-af94-f959d0615676",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4f8d685a-0c39-4562-9c94-a74def1bab74",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5d40a1e5-b484-4b48-8d5d-2998cc37e604",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "32afb72f-e958-4c5b-8372-eb161b731ef2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "77183ebd-74ea-4d7a-a8db-60a33d649145",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2704,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "779a7db3-5e22-4a7e-90b4-3d6e5797e001",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case10.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "78e1f3d4-e2f0-41f5-9d85-6cfd41e50d16",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d28f24d3-536b-4b13-b42b-14387f333555",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2427,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a4533b31-05f3-48d1-874a-405ca458b561",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b34498a7-197d-4096-a413-cf785f8c82ab",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2293,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "de79a599-8807-4ff6-8ab7-d17549c90361",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2498,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "27ae9d5c-9aa8-4c15-93e4-b47d6ae78233",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2629,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1089dd40-ed76-41f7-8bab-b79dd6dbc247",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2620,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a90b0534-bf00-43b2-8224-5eb6ecd9f066",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case2.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2449,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "04d833d7-9c71-44c4-bf07-2362f86360b5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2029,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f90ffabd-2b33-4f6f-9513-68acbd5ffd95",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "674e930a-5bbb-4ad7-81d3-fc4e053fee1b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "84f490b7-fe32-4523-9626-b030fbfe1047",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2663,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "58823dbf-c12c-4c5d-b2c2-ac9dbd91a1a5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "28afc2f5-0774-4838-9711-288a877402bd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2905,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a39434fb-ec96-432b-a184-5fad9316cd5e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c996ce50-7b00-4700-8761-6f79f5a7ac4d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case3.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "48e67163-7fcb-4ab1-a5ed-eef78899cd19",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dc681fa6-2c15-4673-845e-63f557aec3b1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b8415bec-2f07-4cda-b748-bf943114949e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1970,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bd3940e4-fdfc-47da-b1f8-c9939943b454",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "68a755a5-8eea-4910-8ae5-058e884e5049",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8f1d717d-1221-457c-8a73-bf0e444412ab",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "939a5af3-b157-4bf7-8805-4646753cfbb0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "89fbf415-fe8b-486b-8a01-868f3ad390d3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case4.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2762,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3f5c3d9b-007a-4582-9ec6-6ae1a0914d90",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4db5363a-5340-4ce7-bfdc-d0944c6c5f5e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2621,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bff47e85-c2b8-4cdf-81aa-3053f529113d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "558f6ebb-4a13-4a07-ad81-9946ac264641",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2464,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d921a166-aefb-4293-96c8-eec418330a40",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2671,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "beeb5bc3-8739-4cc6-b9d2-bc2be68fd539",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2593,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "458beeb9-411d-4f4d-b6e9-a36be3cf40e9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "760c0314-8b57-49fc-9e5a-f27e187c960d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case5.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "438dbeb9-01bb-4bc8-96a4-63d5626ff2fc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a1a2a587-8dae-4aab-8b70-2d246e843b37",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "89757f14-0b8b-4d23-aa92-6b9f83092f39",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5ce26fdb-a410-4b13-90d4-36308d251679",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2822,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ffe8e1fd-262b-4779-84ad-5f841932c654",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cfd7c062-e6d0-4b53-94a6-fd495d10e057",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7dababe0-75fd-41d2-9ac8-be8a0c53a5b0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1d96cd32-3120-4027-8e85-b26b49cb4cdf",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case6.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2390,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3fb3491e-f545-4cf1-bcd9-db945eba4287",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c8df6ef1-a22a-4513-9ebe-d2856fd5f45c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "549b06ce-10f5-42ad-ad70-4cf8fe7c8672",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2656,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "40aa91be-877f-41c7-bfe7-8ad8c2a7faf7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6ef567ac-6aac-4d26-9429-cf2334cbec00",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2601,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6cdc56c7-c2dd-4461-b383-a8df9ced8cd9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "61d44cb6-355d-4b23-a4c0-0b30c9246bc0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "acd8d7d2-021f-462c-b090-ffb7ff25cffd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case7.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a6b89886-ed48-47d8-9b6d-683099bfd2b9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6fafc681-a753-433b-8fd2-f13e8c78b93e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2548,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fd521d30-5f09-4343-aa86-29a9e81e8090",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2485,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1f3771e2-b94b-49c3-b317-6cc4d94bd112",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2631,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d65f7b56-54a6-475d-87ae-a2fadf62d9b0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2333,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d6bb0cd9-141f-40d0-964b-690b24daa4dc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "424e3d64-85a0-47b3-b121-cff4174b3b17",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "968a28e3-8d70-476f-9f5f-8567ce7dbac7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case8.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f9ec79fb-c2de-4cef-a855-a663d8ca58d3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3d87a500-f2a1-4e1b-815d-cddf1c64fe50",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e9c2e05c-922b-4b05-86bf-7a72562c260e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2535,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1b0cd2af-37c4-4e67-9f0b-39e8ba5a3af7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case0.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for tomorrow\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8ba04cff-322d-4c9f-bd79-f1f341ca83cf",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7214ec41-80c1-4173-a695-8bfbf8d2d8d4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case0/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6c06beb2-7a27-4b67-bb5b-d33bc2806b22",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 2555,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0656bf25-9ba4-4845-b4ae-71d58a0361e4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_10-!Make_Appointment_-_custom_1-2-convo.case9.case1.case1/MAKE_APPOINTMENT_10_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2492,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: at 2pm\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "026183b0-4514-48f2-a539-828c3042aba1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1618,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ce0e5d27-d45f-45d3-88da-5a1788682df3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1693,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5303ff8c-cab1-4557-8ce4-0b697d14f98b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f719b974-58cd-4d2a-9ad9-daafa4ab567a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1690,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "91e70622-a49f-4bb9-ace5-9dea4b7e8070",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9cf35deb-48c3-40e4-821b-01e8bc93b532",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4bb44364-870a-4fb9-b3fb-4d1c13e40e6f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1841,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "85634f72-e474-421d-bbf5-d8250edb5574",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "952c221f-dbdb-452a-8077-1a211c3acc1f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1772,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0200acb6-4003-4276-8ac7-d7e25790dc34",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1768,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a91a40c8-8947-4b8d-95a0-52086d35d335",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1775,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f0a0d2cb-925c-4030-8d2d-22c55678510f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1471,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "40a92b50-cb91-4585-99ab-9ca33b367d51",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1698,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cd3fed48-05f8-4485-a46b-61d170383710",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fca9d27f-2666-4d79-b7bf-80401794be11",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fix my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f0cfd84c-9f00-4478-8713-02256563165b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case0.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1772,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fix.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "292a7dd4-951c-4f22-8e78-18472c1484e2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "71eb363c-1ca7-4b9e-a668-6577f7de88cf",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b1543fde-1d83-4d8d-8f7a-5009199166e1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f57b571b-ceec-40e7-b346-5f5e3b035cdd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1624,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6336ec54-5148-49c9-8e94-c8e7a2767098",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1380,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4dbc3dc8-eeb7-4d0d-ad88-4e2122b4648b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1670,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8101df7a-474f-41e4-bb16-2efb44cde03a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1667,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ecdc0cce-72fb-4ff9-a1d7-385e47749b78",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ab48d581-2c57-4eb5-add6-fde7903fa3af",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1920,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "944247ae-36ef-4c2a-93e1-6b84e59635dc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "77972161-0965-4ae0-a37d-a25dc932ec1f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f87d826e-4002-4f83-b41f-6864d89e3f65",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1902,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4e624a19-d098-41b9-9bb3-16ede5c8d787",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9fbaf55d-b811-4f30-9945-258193625f3e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1764,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9a4369f2-9cca-4d98-9fb7-6372a7500b5a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you repair my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bdd5e41d-34c9-4803-b51b-0c2cec54dad7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case1.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2bf3dc66-c6b8-4e6f-a3fb-379736bc133b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1742,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a33783b1-546f-4106-8e83-2a8c66e3a57b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5341ced0-66ba-4cab-8c82-4fe337abc67b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1870,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8ae6b052-b957-4419-832f-929780312d3b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b050cb4a-e825-4393-9022-500b7dfa0071",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1743,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b2918f23-d1f8-439c-9539-b35349717497",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "30d10a6f-efca-4616-8ea6-cd15ed6e0ef7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1667,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9546cfbd-8362-4557-808f-d612088aab6f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3d09b2c6-6877-4c19-be4a-7fc7cd767e5e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1884,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3eec4162-2b91-46f1-8638-445ea16a8bda",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1621,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8816bd72-bc19-49c3-9899-a8eb0e0cd1dc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1648,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e4b8ea39-570c-4149-b5f9-e5ee14074a4b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1762,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "137266c3-97b6-45bf-a0e3-7de8532557d7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1c583814-c156-401a-a049-3f0e838e7285",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1561,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "81e5580f-1c79-4c57-891f-4d12468d9f30",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1853,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7bb885ae-371e-41c9-b37c-ba7615ff5ac4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case10.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1766,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b0fc4a65-4325-4022-adea-7bcdb21872ce",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1290,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7fcc68ae-1db9-489c-a6e9-1501796add2e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1009,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "514cf6bb-f303-4d68-a3f8-95027e1e7134",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0f322a1a-15e4-4a1e-b8ee-49c3fd6b2364",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "29f2c4b0-23d9-465e-ba6d-92ee866f92f0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c0b9cf5d-c4ae-4266-ba6b-3d83b014c119",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5f94162f-8356-4bb7-ac9e-7a467db7f657",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1847,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f2ab92a2-d4e2-4357-ad01-9d2a116a8b7a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3234c2aa-f182-4235-9dbb-97b668e57c4b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1708,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2188c6e9-625d-4cae-945c-6a25befe56ff",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "62c2a15d-0a0b-4cb6-90a6-6a4741403272",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "84ed29de-0141-4229-a948-834851e33161",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1916,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "86a68d15-a947-48bb-a264-4f5f679ee061",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1675,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2808cd3d-c010-43d0-96d9-da5776498790",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ab05c1a2-75ad-42f5-8311-90e393f37d97",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you mend my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "87301247-b872-49a2-b9b8-49463c8dfba8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case2.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1649,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a mend.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dc48db8d-11d0-4f5a-a97b-7e810654d7d2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9efedab6-53d4-4959-b427-0e7e528ef56d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1728,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0854f0ef-4cc3-4e5c-b16c-ef06c592bdf7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1698,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "59bc9f10-6319-4659-a864-9e021f8bfb26",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1552,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "83b5e941-b5e1-40cf-90ef-4c26c450092b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1725,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1d335db3-2c28-4548-8cb8-ab7fe4a496ea",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1837,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "30e700fd-053c-4522-86ad-42c1e88d1582",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1972,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c60b79e-fd53-43e3-a0f8-e4c980883608",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1854,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "88e3a77f-4b38-4a66-9a0b-284b9cce1f10",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "30d6fc08-4731-42d2-b315-c4e96c207599",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1642,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "40a77dca-2936-459c-8c8e-ebe0a52c4dfa",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8d1c109a-690c-4e01-9cd8-1b3605c73a1f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1755,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2d0db4b5-d7aa-43db-b8fb-2d14543a4be1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "464dce66-0cbd-42a0-abd6-ace87f16d512",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c0c73c0e-ed23-41c3-ac61-ae574929ece8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you broken my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dc77749d-6e7d-4033-9d2c-d3de7c768be8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case3.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1737,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a broken.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8a696d14-9af3-452a-a1b8-aa9f45f59679",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c8448836-5cc5-4737-a899-abce86605e5c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1698,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ac3bbe0c-b96a-4a02-b29e-d32a3882dc0c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "48c1bf00-0b78-4dd6-9ce9-ad77629dff72",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1704,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "61d5d6dc-2c76-43f8-84ad-15cee5c20b71",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c92833e0-edd0-480f-a22d-732282ab5e50",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b56b8958-ec5b-4715-80d2-be84c17dd47b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e6c6d5a8-45bb-436b-b7fe-ccfae8f8ed00",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "90336801-2532-430a-93a8-8249a6cdb74f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1489,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0ff116ce-2c55-4077-805c-c2ce8088ef1c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b4d71196-a820-4458-a3f7-b80d7e8ec769",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1624,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "28829511-d2d6-44e1-934f-1366bd0293fd",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1664,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3fc3777b-b0a5-4662-9cf3-f202011e0ef1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8c3065d0-4463-4cd5-a267-f8d74cb2cce0",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1915,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ae12ec90-6eb2-48da-bd1d-46593b06f4f6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you flat tire my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fe156f45-4294-4c10-b6cd-fcb6e3ccd0cf",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case4.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a flat tire.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f9ef6dd1-80d4-4e97-87b4-4a606170d731",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "59b7c596-31d4-4864-9ab1-c43dd34314ba",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1481,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "49f0e4e9-42cf-40d4-a6f5-ca7d3b45ba28",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1719,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "aeefe7c2-989d-4f07-9993-076b102a1097",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "051e5d93-e08f-4e7d-b54f-5da33b805d4d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1773,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6e70a32f-774a-4f93-b423-56015e5b2fc2",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "52acf0fd-a4e2-4555-9024-65528eaf6e21",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1544,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7d3f8dca-2f82-4aa1-8502-bd5fec8817f1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1697,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0cf141ff-4eda-4b98-bf55-f66d931124fa",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1762,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "809bf44f-81ba-4055-aab1-3986b3eb3a1a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1650,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9ec009ac-9383-4e8b-9e75-8abe29e8b9f6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1936,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "67e5acc6-7386-4d29-9c18-4d113be5204a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "82846c90-1c75-4b97-a2b2-8ce0e054ca0b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1756,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ddba570b-206e-4e44-ba88-1198972219a8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f2fdd0e8-849f-42c4-9a0d-985d808dedc3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1684,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you fixed my bike?\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7ef103bc-65db-44ea-b745-7565860e15af",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case5.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1673,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a fixed.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "53862e80-fd95-49d2-9c7e-0980b3c21c0f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fa6ce05e-639f-4c74-9b16-c71fd8f05785",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f12ff053-ea98-47c2-8040-dbd969369b10",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1815,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5bb97bf8-b586-4bdc-bf8f-0ec6ceedb309",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1963,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "59ee411b-895e-4dd9-867e-276f4bc76ce8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f24e8575-ca9b-4598-9705-fae25c17184c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1682,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5f4b1fc0-2d2a-4041-828e-1caa46bba90a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "db6f19e1-3fd3-45a6-a18e-a3f3183ec078",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1656,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "981c1f7b-4c39-4db8-957a-ca37c820e6ce",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7e206366-b6ef-41f2-ab7d-789dac644f79",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a5eb400c-7a2f-449f-9f02-a19f0b55821f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f7f6936e-569f-49e3-bbd1-43c6ec204dd1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1866,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ac68d0aa-d0e9-495d-9086-a7b3cf4bc5a8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1630,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "67f3cd65-3f13-43fe-a33a-c5a4e6821f97",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "25e03457-6d7e-42bf-a70d-815970e12a23",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "665d355d-036d-49c2-af5e-3b757f5b90fe",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case6.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a service.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "827a90a8-8a53-49ef-aa43-ab4badc27848",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1461,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fd380b01-4b2f-4c64-a36e-2afe8d3cf1dc",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "54efbe03-cdf9-4b8d-ab33-e6682687457a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ef304299-d60b-47ad-82e3-ca1183aefd0e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f08f57c0-a8dc-4f6e-b860-803c8d1d02e9",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1853,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "576f443f-4f22-43bf-a540-a6333c52efc8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1427,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "616feadb-6df5-4143-90f3-aec00110a993",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1882,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "65a1d06f-8e9a-4093-9f47-30f30ecbd51e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f8d8498c-ed99-4664-aeca-e94f6a8ae8d6",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1880,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0775d746-1396-4484-9936-a5465d7ed164",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1771,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ee96de6a-d077-4d73-b7de-49dc4953ef73",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0b804c07-2a14-4e25-aaa5-3f30e2271998",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d3dad5db-bda9-499d-b3b3-f0af2ce374b3",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1895,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "142651d4-ac59-45b0-9676-8e31d40c2591",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 2006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d29f1a8e-fbf8-4bdc-9477-767aadff323a",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1759,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you overhaul my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cac80085-c000-4b5a-a5e0-02acadfae13f",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case7.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1700,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a overhaul.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5eb3dfd4-783d-4077-9266-8b96fe5eb6fa",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1636,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7f872a04-6a46-4439-b806-83894ae17acb",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1685,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c3a55756-3144-4c5d-9441-f0d4cb7334fe",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a327cb60-0478-4e2d-a4de-11ab820cfb5e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1674,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fdf1ec73-9974-42dd-9e2e-c159ef119b74",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1775,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "20ab70ce-7117-43d5-a4e8-45e82b35c79b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3177b998-d147-4d12-be11-c2c438944a87",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3cfa5f63-e013-4d7d-993d-184009df71e5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1699,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4aee1fd2-1397-4f31-886a-726e107dfe7c",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f923cd3e-e382-493b-9a8b-6e50d042d8a7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "131401c6-2a5f-46a5-a906-b8e1fdc9b6b1",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "eeb61c18-01bf-47ec-a4f0-678f0fca0cc4",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1843,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e07239e6-2681-49d3-830c-b9c4c5315411",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1873,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "58f2a34d-23d3-4ab9-a30c-07b39208c050",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1763,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9f90f550-c2b9-4028-b984-10e7fff119c5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1707,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you maintenance my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "be372b1b-72de-4e5d-a9b9-457a0908e643",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case8.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1648,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a maintenance.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e569341-5f23-4f7b-95d1-d016ea751ec8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "16c20cb3-cb8c-4592-b475-872544f402ad",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1757,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d92ea3dc-b642-41d5-ba36-3322398f37d7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1876,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0e6e145a-b974-45ba-8986-ea8fa3501a3d",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8604d0e8-ede1-4cf9-9175-0331775bbff7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1665,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "64a8e00c-7905-457b-ba93-74ec9b96ae61",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1609,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "86377024-0a45-46b0-a756-d123314634a8",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1778,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b34bd72b-6cd2-4c2d-8b51-b204539fbe76",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case0.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1653,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-15T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4e29f8b2-3f29-46b2-aa92-1e8719e529f5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1724,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "726f6fcc-a65b-47d1-ad11-47690ed57d5e",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "960cb2db-d8d7-492b-a249-48351969f871",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1750,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c6362571-7873-49b0-9b08-bcc5cb5938c5",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case0/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1745,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for at 2pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T14:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f4e1c467-a83d-4c3a-816d-c78b485c136b",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1858,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f5b310c5-cdba-45df-8872-cd2bd1088805",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L1/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1712,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike next Thursday 4pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bb39f3d8-17a7-4fa2-b960-45b7bcf4ec61",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L1",
              "timedOut": false,
              "duration": 1704,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you tune-up my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "062baeff-8280-405c-b735-f206fe24d575",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Make_Appointment_11-!Make_Appointment_-_custom_1-convo.case9.case1.case1/MAKE_APPOINTMENT_11_USER-L2/MAKE_APPOINTMENT_-_CUSTOM_1_USER-L2",
              "timedOut": false,
              "duration": 1711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm next Thursday?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a tune-up.\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-11-23T12:00:00-08:00, at 2023-11-15T16:00:00-08:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "59f6e020-865a-4e37-bc79-1e1838bf91a7",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Welcome_Intent-convo/WELCOME_INTENT_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Welcome_Intent-convo/WELCOME_INTENT_USER-L1",
              "timedOut": false,
              "duration": 991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: Hi, welcome to Hogarth's bike shop.  How can I help you?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c6ea3aa4-5284-4193-a694-4a513e6cf2ab",
              "parentUUID": "a4127f87-aabd-4997-9ee4-eab9c23e9438",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16b0291d-365f-4b54-89f9-d6b42025bd3c",
            "72718934-3f6b-4a00-9152-d2144d5094fb",
            "62cbbcf2-e5cf-49a3-8525-4786028315dc",
            "ba5ba077-7ec0-4736-a2ff-28fb5ab0331c",
            "336b2a66-081b-45a8-9302-c020645a8bd8",
            "0d81af31-65dd-41d9-874b-e15e83a0f58a",
            "a8fd2b97-f28a-4188-80b6-2821f720132d",
            "47d72fd3-3d60-42b1-8c3c-03bb87ca1d6e",
            "c3ee60b2-0333-4195-bd9a-e08c4055218b",
            "bea7d844-067a-485c-b26d-54f92f275f82",
            "41c3b89c-0c44-4fa8-8adb-1225de460f89",
            "f935fa02-61f0-4026-82cb-12349f22b00e",
            "4d0e4630-a598-44ba-a8a8-0add01cc8fa9",
            "48652974-41cc-4197-805b-3ce4741c4231",
            "8edc5ec0-153a-4448-b338-e425014df0d9",
            "f9d7ef5c-8649-428b-b725-a0cb19d7cee7",
            "1d71c2aa-5cef-461b-92d1-78920fd68a39",
            "475cda6b-56ae-4bb9-bd50-b1479262df66",
            "789c71a1-47fe-449a-b9ca-a898ec6aa796",
            "882313e1-1228-4355-8554-510b01e5a71e",
            "486fa567-b9b4-407c-897d-7bc0ead0255a",
            "377d98c0-d6d0-4ec7-9a18-6ee73a983873",
            "8e25da82-05c7-403b-a8a7-ba49d5b972e0",
            "dc8e9a5c-8bb1-4884-943e-9c5d8577ba01",
            "01068587-9a20-4e98-b7da-8a69e0f614f6",
            "1cf5ee80-1dd1-4d6b-b257-a51a7ab5a246",
            "72d1bdda-d905-496e-8740-dfbf0dde8b9e",
            "3e9d07b1-ed43-41a1-87fd-f075f6ff1de6",
            "c09c559e-ac9a-44c6-bb77-9bfc7ae5199f",
            "6e6e9ad8-66a6-4d37-95d7-82d7569d8e97",
            "dd150ed3-5a93-4659-a890-da441c83c307",
            "cda06ca9-7f56-42a7-911d-f9741d2ce51c",
            "73285176-c619-40bf-8d26-b298c5fb0856",
            "bc8d4434-90cf-415e-bf09-784311b945ac",
            "01592958-c2ca-4780-92ef-f86dd4492d0e",
            "3f627edf-f793-40f9-8651-d816445de08d",
            "7d8ce74e-94d4-4160-873b-60e84e8e6fbe",
            "c19881e8-c470-4cc6-8738-7d592fe5fdb0",
            "dde813da-b39f-441d-8503-1bd130349926",
            "2f8f680f-2aec-43ae-89ff-636a37baaaf2",
            "1c5d3702-f71c-4317-a108-09c095eacf6e",
            "e7631f0f-740d-4428-bdf4-49b7cfe6aa12",
            "7b40c529-8c2c-40ab-9644-a796a8d8f054",
            "3c650b9e-c3ba-4125-8f40-0e08412a0806",
            "913fa68f-e3c1-499b-b326-1a4572dbf332",
            "d502fb47-622e-4980-b4ff-ee28682c7384",
            "8ea27b58-3f05-4507-b805-ecaf45cf98f3",
            "26626e0d-e7b3-4802-8ac2-fe3557bef96a",
            "4a78d57c-2ac1-40e6-a82f-00ed47f8a7da",
            "0f5f13d6-c7ed-438c-990a-cd8176c6fdbc",
            "0432fea8-fd99-4a71-87e0-f64e53e13be2",
            "044a922f-b2b2-4043-bf35-b063fd8e38bd",
            "b543bba3-3b4c-45ed-af1f-42564fa09662",
            "92e93283-2b3b-4880-ac8b-f0512280f64d",
            "ea8e3816-e8a8-41ac-8cc5-e7fd3e64f252",
            "59f668b1-3111-4fb8-b5b1-0b5a4835f5ff",
            "63ffe66d-914a-48c1-b49c-5cda8ed02680",
            "14a8a8ff-8c2a-4d2d-bb71-cfcde966f234",
            "2e909086-586b-4cd6-a2f2-0067382873a5",
            "64b832c2-cbd6-4299-bfb3-130985f926fa",
            "c9783c86-6eab-4d62-bc59-dfbcbdc477ab",
            "872ee370-74fe-41cc-a34b-320a9b663e82",
            "e833496f-b04e-4be7-829c-3ecd867890c1",
            "b946bf90-2537-41d0-91cf-6c786cac54de",
            "90d31ce4-06ce-4165-a432-d478fbc8b7a1",
            "b72403c9-502b-408e-aac8-42ad7060fd22",
            "e11fd77b-6828-484d-81d5-76c3193325bc",
            "e497396d-cfef-4829-9ad5-5365a21fb0a0",
            "07e33f8f-f012-45ce-8017-b05a60bdb243",
            "7ec4d54c-79e3-4263-a209-bb157e81a7a5",
            "4219a329-ba96-4d1c-9b85-1f7527389a81",
            "46459420-be40-42d5-97fa-4add89b8ca17",
            "910e70aa-ff3a-42c3-b861-988f214ec6fb",
            "8bbadc82-a8a4-444c-b8d6-1b62cd33d6cd",
            "41b8ebfb-12b5-4052-94b4-dde63921785a",
            "3d22ccae-ee5d-4b8c-ac3e-446322bd9189",
            "1c24c3f6-090f-44c6-873d-686908964a34",
            "3b7faea2-a67d-4bb7-9825-737990d3dd47",
            "7ebba5ba-ab8c-4bc6-819c-b296e08c327f",
            "96f02f14-2d39-40a2-9648-3f4f8f0b2b27",
            "1ac30d1a-6579-4853-b190-599604780596",
            "ca84d269-d5a1-46ee-811d-9e85a4815086",
            "608884a0-5de1-4434-9f21-ca1f082200e0",
            "0c14edc4-3896-4a24-b1de-bb964512239a",
            "cc69d31d-94eb-4e8e-8117-92667cfe0a9b",
            "402c2480-db61-46bd-8e49-836fa7527d51",
            "68216965-b372-4499-b048-ca9b6fecda33",
            "c3b883cb-aa7a-459a-b744-e783b1af54d2",
            "21ecd729-6cbf-4839-8692-87fafd074b3d",
            "7ac41c4b-bd99-4b80-991d-673f973b1848",
            "1f84944d-9659-468a-bdca-eed6777f8e65",
            "99315bab-8c2b-4f6f-9ade-e028c9a60441",
            "a19423f4-4643-43d4-8284-2b9696965d3b",
            "6a0cecdf-8023-489c-b3a7-8c655ac7c772",
            "b535db51-0c9a-4978-80b3-a5443da5d375",
            "790856c3-b435-4819-aa8a-ff4770198f0e",
            "a4ddaeff-0f6a-4f06-ae18-505e9ddccb55",
            "e77f39a2-f384-4b6d-bd41-145505da9cca",
            "eea6fc2f-6578-4a3b-b231-d7632c0fe051",
            "ece6dc2a-2792-4b7d-bc1f-f3b8f9ac8e49",
            "d426fd69-edf7-46e4-b2ac-6c632b9b6b27",
            "51644253-d1be-4bea-b125-8fb5f0310589",
            "0671a72e-7cc0-47af-af09-50f901ec336c",
            "d7afb0fc-8fe3-483f-90a4-45aaa48b9a4d",
            "84f6d46d-fe69-4ca1-b3ff-b80bbb3986bb",
            "756c311a-b372-4fa6-a023-c972308d8b74",
            "356b594f-ee49-4736-b8e9-ca22fe711a86",
            "66b60647-46d3-43a8-9296-2e69f5078e26",
            "86fb78ad-6c66-45b8-9bdd-09b12f06ea98",
            "e3ae7800-4264-460c-882e-9fcd90977efa",
            "9d832636-d581-49d0-952f-102c4dae3397",
            "420773d0-9306-4dc0-a5e6-aaefc0ca8a43",
            "564488b5-06b1-4cf4-9fe2-ca04e95df069",
            "a34e1b37-8acc-4f43-bc0b-55b355db3861",
            "28ebabd7-94f7-44ac-8033-41bdd412e01f",
            "11487b7e-2c07-400e-bf9c-c024177fa76a",
            "26cc401f-0fa8-489d-91de-bf3dbcfc24aa",
            "f8c4ec67-e2dc-42e5-a493-35bed260bb33",
            "58f79c6c-80a4-43b2-8eba-10c5c4206532",
            "b0ae49ee-d620-441d-b39f-fcf998b56e8b",
            "57e8942b-65e0-4b43-8f45-91c3a1e2ffa7",
            "26b7211f-56a9-4ace-bae9-404c5177a017",
            "d0ae379d-6fef-4656-8cc9-fcb36fba1416",
            "ad2d5a38-c657-45a4-911e-9ad6eb646a61",
            "0f0f8e15-f0ed-49a3-a29d-f78f7286289b",
            "89dc8389-6520-42c0-b587-67e54446411c",
            "fb744773-f1c3-4ae3-b03c-07c3d932f488",
            "89b3114a-7516-4619-b53b-d4305f8ac86d",
            "086ccbfa-a35a-4691-93e4-82e550f52100",
            "c9081939-8a5d-4b77-abae-4ed6a6749425",
            "38feca3e-829d-40fd-9c93-b9d356f749d6",
            "ced8ffed-5448-43dd-91f9-7b4a4d2b2316",
            "b7323c22-439e-473a-9180-7b5097f5c649",
            "20f4e12b-5699-427e-a3e2-43a684acb377",
            "95f741cc-d12c-4175-a652-ecdc151d4c79",
            "57fa2ed3-d8d6-4810-be6c-e34c22234c8e",
            "ec3e6bd4-a51e-4d99-af21-92e32b995a3a",
            "e1341629-e8c3-42ef-864e-d549e31a6896",
            "dff12bae-fe7c-49e6-bb41-c113ec328461",
            "4df8a279-2c78-44ea-93f3-a8655e40e4fc",
            "edb7b5d2-930b-4c27-983c-4088dd96bdb4",
            "99d4e2d1-859d-41b3-a5dc-433036c88288",
            "9c254c64-558b-4993-8f73-0b0dcda8160d",
            "ac035eb3-8f8d-4b6d-92e1-1f194681216c",
            "fd15b219-6afb-4908-812a-1ff156eea37a",
            "2a32077b-7c63-4a8d-a052-69d35d595832",
            "203598f7-93d3-40cb-adf5-d6b2f7840430",
            "74de245a-5374-4792-936a-db03c40ee562",
            "fac203ad-03dc-4ef4-b748-fffe44fb4c35",
            "e220ca03-e2ae-4ae6-b32b-b8b160c09f3f",
            "e44cc67c-9d05-445d-a042-7827419b06f2",
            "c447ef84-6d37-44fe-ae00-88d6a60c9e8f",
            "f266aea2-1882-4ef9-8a4c-ba44339fb026",
            "85fc0322-b034-4e84-a2e6-12f131f24c7e",
            "e79ad365-99c4-4b28-b52a-853eeaa8aa09",
            "01075092-2f8f-4895-8baf-a280d77aaf2e",
            "e21f7046-ed2e-4e09-b711-2145ce636a77",
            "4de7111f-40be-4619-99f5-dc57452735a7",
            "431ff1f8-2a43-4309-86da-eea678a2eaf5",
            "f921734d-62a0-4f5f-baeb-0d18c3846875",
            "f14370ad-c9e2-4887-84a2-ed57a9bd300f",
            "93ffbb14-4f6c-464e-81be-236b913d98b5",
            "d60f1958-b42b-4776-985c-d0c8b9d47c28",
            "dbf06998-3d83-413c-bb18-08fe1cd40b85",
            "7ece6ca4-5c0a-4665-a2b7-c15ce416908d",
            "9fc2d7a4-6213-42f8-95ca-0b4b24136b81",
            "a7fcc79e-98dd-4393-acec-17d2496831da",
            "d8958951-077a-46da-a282-c83e98fb0b08",
            "50c5a7aa-2a96-4053-9b8a-900cd938b0be",
            "ddf5e99e-a277-4979-8f34-e365541e096d",
            "5a1a0c77-c6f7-4317-a915-2f73903a89b6",
            "cc153f9e-af09-461f-89e5-a31bdd259d46",
            "abe50b63-5215-4792-80e2-9eb73a061d5d",
            "77636a50-4c3b-4698-8de3-d8adfc2fe7a9",
            "a8df9505-21e5-4326-be9f-d82e50a51ae1",
            "4028e8d3-7cbd-40f0-ad0b-70d313f8c054",
            "e748f0fa-383f-46a4-8b94-3792cee2356d",
            "3cf08088-81dd-4aca-ae02-15702c7987a2",
            "245b23a1-6ac1-4d83-8671-734c07859d8f",
            "12768f28-15de-4ccb-b876-3915316d5ad0",
            "deff8d6d-6e53-4ae7-9de6-149ccc67b79e",
            "dac9d4cd-e819-49f7-b226-0c25d17b521b",
            "8e6d95b5-1fde-4c2f-b02f-d91a382125d7",
            "e731dfec-6d88-40e7-8a68-4f3bb81e911c",
            "652b29ab-e824-4ee6-b1fc-e7068719b972",
            "97e3bf31-1d77-4b77-928a-7d36cf722762",
            "1dcb5335-0582-4d7b-bbb3-88abb04264b2",
            "e33ab122-5f61-4ad6-83aa-9e97c525034e",
            "33baa939-4f61-4f6d-992a-d2f066c1e0fc",
            "2ebb3981-77de-412c-8f64-3e34a0aa3385",
            "82f5ad1c-82ea-4f56-9733-d44b1791ada8",
            "fc919998-112f-4d2e-b1cf-51c0fba39ddb",
            "38e56483-b847-4c77-9dcb-641cfe6363e6",
            "1a29e92f-5d42-4cc6-a7b8-76678eacef47",
            "249b5b47-8442-45c7-84fd-5cc5e6bcb135",
            "ab6808e7-862b-492d-9a3b-7a0a398036d6",
            "22f8d309-abfb-4c78-952a-0e61e9f23e15",
            "9d4c4ba3-ec2f-4f51-b8c7-2e69542d1656",
            "1ad466db-519e-4c12-840d-7ad612472c52",
            "c7fc7dac-d330-4c12-b3fe-8286dd7a8430",
            "8e4ba717-749c-4b30-bba3-df279c9f4551",
            "595e17af-e4b8-4697-a83e-727732832150",
            "b5d73a88-e9d7-4a03-8952-885ed08d2437",
            "c54b906c-4335-48a3-a710-02463f5c76c6",
            "fc93bc4d-d855-440a-acc7-ba08b042fef3",
            "39ec06ee-991e-4e9a-8f01-5e0d6b3b5d01",
            "8e570583-8691-45a5-b9b0-b01c1a836205",
            "e1408533-385d-4964-8141-05ddc4d5678c",
            "e5b11403-46bc-4a88-9591-4706b115f69a",
            "3a6654c1-bcd8-4936-a94e-d9ba7769cec3",
            "412de011-7110-4b7e-acb4-efc5673e7fd7",
            "31502ed4-a129-44d3-88ad-cfb8d3c6efbb",
            "7f52c106-e0e1-46b9-ac88-72d36aba622f",
            "6ff6f247-0ee3-4d09-90cb-158fc04d714b",
            "94e715e8-4f5a-4c9d-9530-c89b63e7852b",
            "2949ec6a-1474-4dc5-af1d-7df5a18052dd",
            "ed3c3293-5f49-478d-9f51-9e45ee6aa8c0",
            "7c7872ba-946f-44da-9e7d-441efe07018d",
            "066654bc-deea-4e94-85a1-9785da6f8b25",
            "b830ac2a-a1a0-4531-bf6b-489bd1de6ee1",
            "9f5efc60-feb3-45c2-af21-6727bed6ce64",
            "15b65351-0578-4e9e-99a0-e4500229c4af",
            "d9f99013-3030-410d-94cc-9cd4f7780983",
            "3a7128b9-f8ca-45da-837e-0de03f64c964",
            "1910b0dc-bb85-457a-b07e-1b0414404405",
            "6aa684d3-d886-4e2d-88c2-fbd9db7d9d5e",
            "5289dbaa-2aa8-4a31-a158-a6e79b1e6b00",
            "0e2c82e4-2ebd-4c40-ba91-24a22a32798c",
            "01567cdf-748d-4441-a627-1606176f6976",
            "e3133a97-54c7-44dd-acd9-a83bd293e47b",
            "db7ddc76-fad1-4d0e-9a03-304a25b273d1",
            "05078be6-cf08-4aa3-8e07-6a8fc5f21ae7",
            "e84b4a34-338c-4be0-8de9-f4fb46138c76",
            "048078c8-ef79-4661-8d1b-51bc87884dcd",
            "621d0f56-c6f1-4ae2-938a-886fe0e685c6",
            "2ec15a2b-15b6-4878-a76a-43ba3bd7cfd4",
            "c1c25519-d29e-4f27-a7ae-1b9d94de54bd",
            "3e990e99-c5c1-4193-bbd1-5f9d8b752e40",
            "a42bb2bd-497c-4037-91e3-65390361058b",
            "a2378a3c-dbb5-4dc7-9bbf-1d88741ea939",
            "78690ac0-f857-4ae3-a3c4-4021e78aa9c7",
            "9ad2227c-3200-48f2-98f2-93ca8d68114e",
            "79f22938-3413-4f31-8d2b-69204dd9286e",
            "a9d6899a-bec9-4167-b732-abbf9785f654",
            "f34ffef4-42d2-4745-84e6-c7c68700f496",
            "c00565cb-c749-4d26-9523-3542b34fe203",
            "7ea77cb3-7a06-42d2-863c-2e3513c3b95f",
            "5e5bdbf5-1126-4d37-8f1d-2ed4b2335ddf",
            "2cc541ca-a2ae-4bbc-ab24-29bb52da4c45",
            "c55eda16-1ce9-4b6e-94bb-20ab474de22b",
            "aa7e9d29-c1ca-4745-b035-c0be6b1c8555",
            "a3824659-9398-4355-9427-38f25c2bee55",
            "effdb46c-7391-4c2e-95df-817fd1910c81",
            "4dd746fc-ac63-4230-a2a7-04b95c5f860e",
            "f08769a0-0118-4c37-8fb1-1e73526ee338",
            "bbc58a4b-7515-4138-8650-d707beca6b7e",
            "61f9238a-b9e7-46af-81ac-a6547aa9769b",
            "f9ccd5e5-0210-4d14-82de-ba6bfb64bab3",
            "e67e6589-6ae2-4ed9-8dd5-e1c03afd8564",
            "3c69e2ef-1af8-45c5-af7d-eef8496adf51",
            "f3e8bece-faa5-4b8f-a503-743711e57f0b",
            "6faa3bab-188a-4a5c-b984-3e0788f4efee",
            "cad68842-e9af-4a44-a8e2-104d6433a3db",
            "389c4b36-c56b-4d45-8701-5069142c6791",
            "2b1d6b36-c7ae-4b5f-a50c-80c37384a1c9",
            "c13fa7ad-017d-4480-b53b-89f806df6ae2",
            "43bb9e78-d2c7-41bc-a2fc-98b67fb61041",
            "9d9ea330-0753-461d-b5f6-8372359404a5",
            "7260e198-e3f6-49ac-923f-3f80a5b4d6fe",
            "a304bea6-2ef5-42c6-aab9-8ea2d44b497f",
            "ca15f26c-8d71-43be-87f2-63484922b9f5",
            "0fee6a6d-513c-4dcb-ae7b-916eed24a287",
            "81c4aa75-011f-480a-a990-554d265e4508",
            "834252b6-4393-472f-a72a-506286c64939",
            "503d378a-68c5-4166-90c2-2bfc62091777",
            "e30c81b6-acdc-4834-bed4-d5d4aaeab3bc",
            "3287c77f-3acf-4a34-bc3e-51a548415a41",
            "a73f382e-1809-4959-a228-18936b3cf12f",
            "23ca8fd9-d0c5-4014-b2be-6de432f9bb20",
            "794fafa1-54a3-4bb1-a58a-6f34f3af84d0",
            "b26c409a-0d78-438c-9fc5-ca35b2b55e6b",
            "9975e63f-146f-46bb-915d-ffc5c7f3b6d7",
            "80693af8-bc35-4723-ad1b-603e8437d066",
            "dc6026b7-38b1-4cf8-9f32-c3e048609a6e",
            "dcfb3786-d69b-42b0-a67a-c9f7fc10b0c4",
            "2d834698-5c80-4169-8af6-da9dffc5ac63",
            "de63ee8f-ff12-477a-850e-2f24c64eb22a",
            "30dd328d-a130-4c6f-94e6-073e3bdfa7d3",
            "c58d4d22-0672-427b-b973-a808d93b228f",
            "cefc796f-27cc-4c02-bc15-95f6b6d95ae1",
            "f2c0dcfb-bf51-438e-adbe-cb51d5bf59aa",
            "9c1b642a-184f-4b93-a985-61d1afb87bc9",
            "82f75bb0-ef61-4d5b-a5a7-1587b3bc073c",
            "c70dc29c-d2a8-45af-82a6-0a48936153e5",
            "132a1d9e-2b29-475c-8cb2-b96fb79244e0",
            "00c73690-5f9e-4125-a6fb-eb07f3c86115",
            "a3d2309a-6c8f-444e-a361-87ca8a12abfe",
            "1372682c-3fc9-4bb1-83de-9a8eb3b19ccb",
            "fbb31c7d-86ce-4ff5-8a6a-0268156ef37f",
            "04422ad6-2b95-45b1-b031-902ed7c91111",
            "facc260c-8350-41a4-b535-b5b9866b3b6f",
            "4a48f0a5-66dd-412a-acec-5f6bcea6181c",
            "5ec1ac3b-8c2b-430d-b325-243eda0ee91b",
            "c905e03b-eaf0-4170-89fc-4a07769dd1e7",
            "9c569846-260e-445d-b474-29072f152c88",
            "7c56217e-d80e-4b54-99b5-9f258235c682",
            "ab87840f-bc63-4562-b4aa-66488bb28e06",
            "01a58546-5ae2-41f1-a32a-f7c93fb725b9",
            "ad8525f9-3721-477b-bb12-809f5db0210d",
            "bcbce674-0835-4e31-bbae-883c32b89d8f",
            "51fb8890-4331-4d3c-a886-5fbccec6b261",
            "ed23ec05-2059-4bb8-88f5-e1e6f95bbed1",
            "11650b03-5955-4cba-9624-cbd3d78d2424",
            "5e66b0b8-7d62-40ba-ab75-918d9543a123",
            "3352f79c-8e53-4ac9-b688-2a59d9d0c1ed",
            "77a0ab82-5bfd-4bc5-bd10-4540b88d6ee8",
            "07cced45-b805-4ddb-a3bb-0e214f5859a4",
            "6877c0cf-ea99-44c4-9f24-1d103f3274e3",
            "5132c529-847d-4e0e-a39d-2950fa352f57",
            "3df20498-9e9e-4064-95c9-69c75aa58fb6",
            "979eb66b-f221-48ca-95d1-4a00ee8a195e",
            "79c872fa-d3ba-44a0-99e5-b5427536f378",
            "4d889009-a9ef-4b03-9ed5-79675391376f",
            "e7e6034d-41aa-477b-8e4b-3c7b924d4013",
            "d33905c4-f254-4ede-8125-b4ad6f0afdf2",
            "86dcd896-38dc-421b-9bc3-2657ebc9f405",
            "4044a886-acfe-4bac-a87f-8faefb433809",
            "44df852d-4c44-48ac-9d7b-46fb770ba19d",
            "82e4e041-945d-410d-9fd0-7cf2c5dc0660",
            "d20e4f88-2566-4e4f-835c-a4f7bcfae454",
            "7c9fcbb4-68cf-4d02-8222-da55d0e08f10",
            "7846e6ef-2e20-438e-9e6f-6e7e2bb8a470",
            "ea88b4c9-8340-4f02-a094-c2a20d6920fb",
            "d89a577f-63e5-4846-a93b-cfe8d515f8de",
            "3156d1a2-1c7a-4318-8bcd-6e8a01975e76",
            "3a10692a-ec5c-456e-91a6-422711f4392b",
            "d4304c9c-27ac-4cee-a33b-e66426294653",
            "05c0a677-31a5-4639-ab67-8e529cbaa182",
            "76686047-c558-4a26-bb99-123965d7ad27",
            "24194a6d-7ece-4819-afb6-8a579332b412",
            "9dc30f69-db83-4154-a003-23707570af07",
            "a9da476d-6490-4533-8902-f87b4f9e3e3e",
            "b868cc46-0348-43a1-8c3d-bc9bf7bab3cd",
            "b464245f-c091-4a35-8cfb-6dedc1da2d29",
            "60f679c9-799f-47b7-87f9-c4fc429bf8d5",
            "3b9ae21a-a4a5-401e-9c29-aa7cd00d6a02",
            "9c38d96b-9840-479e-b1ac-2da4af7c7ac5",
            "8bdb50e4-0560-49ff-86d5-ab776149e9a4",
            "7c9050ce-12f7-407a-a2da-065f95d93c1f",
            "edaf15d9-eb97-49cc-bee9-66ef6321955c",
            "8a928416-90f1-41e5-8dd3-718a36378241",
            "5bbe29ef-55de-43a1-b114-01f80c7b6ffe",
            "c0ba0bdb-e2a8-43b0-972b-2d8f3808d01a",
            "9653e9ee-72dc-4119-831e-d7d9c8d45f6f",
            "589b4801-6a03-4747-9283-537d372980a5",
            "6032f328-3b16-419a-b8b7-7b84a67beb07",
            "9b25ee35-5774-4588-8275-327ded31e6bc",
            "695b9932-d3fb-4b6b-bba1-988a83e78e1a",
            "c38fa573-e7af-452f-a509-0abb5358041a",
            "aec8c166-8991-400c-aeab-49ba50ec4fdb",
            "4c292290-6bd1-4947-976c-1de45088a3e7",
            "8b8685f9-d8e5-4876-9543-ed13ddf1a5a9",
            "a86880c6-da3c-4964-8c37-acffe8a7c889",
            "1ed8aab3-65d1-4ba8-971e-43cab03314df",
            "38ddd060-67eb-43f4-aa13-14aeae3304b2",
            "a1b3be91-cbd1-4451-ba48-537cc44575c7",
            "8e20eb4b-8e32-4414-a581-0e9ca5878df7",
            "f1572e5b-2c60-4617-af67-e67fc7207899",
            "851fd177-dd9b-4a17-9663-6697491b1327",
            "fe64d787-fc3f-4d2e-a849-a253f1c70e57",
            "058bf741-a4b8-4e9d-bfd6-aef72489c720",
            "60a927b9-51cd-4831-a5bd-9798ba6feea5",
            "1c021f2a-9ed8-4314-af94-f959d0615676",
            "4f8d685a-0c39-4562-9c94-a74def1bab74",
            "5d40a1e5-b484-4b48-8d5d-2998cc37e604",
            "32afb72f-e958-4c5b-8372-eb161b731ef2",
            "77183ebd-74ea-4d7a-a8db-60a33d649145",
            "779a7db3-5e22-4a7e-90b4-3d6e5797e001",
            "78e1f3d4-e2f0-41f5-9d85-6cfd41e50d16",
            "d28f24d3-536b-4b13-b42b-14387f333555",
            "a4533b31-05f3-48d1-874a-405ca458b561",
            "b34498a7-197d-4096-a413-cf785f8c82ab",
            "de79a599-8807-4ff6-8ab7-d17549c90361",
            "27ae9d5c-9aa8-4c15-93e4-b47d6ae78233",
            "1089dd40-ed76-41f7-8bab-b79dd6dbc247",
            "a90b0534-bf00-43b2-8224-5eb6ecd9f066",
            "04d833d7-9c71-44c4-bf07-2362f86360b5",
            "f90ffabd-2b33-4f6f-9513-68acbd5ffd95",
            "674e930a-5bbb-4ad7-81d3-fc4e053fee1b",
            "84f490b7-fe32-4523-9626-b030fbfe1047",
            "58823dbf-c12c-4c5d-b2c2-ac9dbd91a1a5",
            "28afc2f5-0774-4838-9711-288a877402bd",
            "a39434fb-ec96-432b-a184-5fad9316cd5e",
            "c996ce50-7b00-4700-8761-6f79f5a7ac4d",
            "48e67163-7fcb-4ab1-a5ed-eef78899cd19",
            "dc681fa6-2c15-4673-845e-63f557aec3b1",
            "b8415bec-2f07-4cda-b748-bf943114949e",
            "bd3940e4-fdfc-47da-b1f8-c9939943b454",
            "68a755a5-8eea-4910-8ae5-058e884e5049",
            "8f1d717d-1221-457c-8a73-bf0e444412ab",
            "939a5af3-b157-4bf7-8805-4646753cfbb0",
            "89fbf415-fe8b-486b-8a01-868f3ad390d3",
            "3f5c3d9b-007a-4582-9ec6-6ae1a0914d90",
            "4db5363a-5340-4ce7-bfdc-d0944c6c5f5e",
            "bff47e85-c2b8-4cdf-81aa-3053f529113d",
            "558f6ebb-4a13-4a07-ad81-9946ac264641",
            "d921a166-aefb-4293-96c8-eec418330a40",
            "beeb5bc3-8739-4cc6-b9d2-bc2be68fd539",
            "458beeb9-411d-4f4d-b6e9-a36be3cf40e9",
            "760c0314-8b57-49fc-9e5a-f27e187c960d",
            "438dbeb9-01bb-4bc8-96a4-63d5626ff2fc",
            "a1a2a587-8dae-4aab-8b70-2d246e843b37",
            "89757f14-0b8b-4d23-aa92-6b9f83092f39",
            "5ce26fdb-a410-4b13-90d4-36308d251679",
            "ffe8e1fd-262b-4779-84ad-5f841932c654",
            "cfd7c062-e6d0-4b53-94a6-fd495d10e057",
            "7dababe0-75fd-41d2-9ac8-be8a0c53a5b0",
            "1d96cd32-3120-4027-8e85-b26b49cb4cdf",
            "3fb3491e-f545-4cf1-bcd9-db945eba4287",
            "c8df6ef1-a22a-4513-9ebe-d2856fd5f45c",
            "549b06ce-10f5-42ad-ad70-4cf8fe7c8672",
            "40aa91be-877f-41c7-bfe7-8ad8c2a7faf7",
            "6ef567ac-6aac-4d26-9429-cf2334cbec00",
            "6cdc56c7-c2dd-4461-b383-a8df9ced8cd9",
            "61d44cb6-355d-4b23-a4c0-0b30c9246bc0",
            "acd8d7d2-021f-462c-b090-ffb7ff25cffd",
            "a6b89886-ed48-47d8-9b6d-683099bfd2b9",
            "6fafc681-a753-433b-8fd2-f13e8c78b93e",
            "fd521d30-5f09-4343-aa86-29a9e81e8090",
            "1f3771e2-b94b-49c3-b317-6cc4d94bd112",
            "d65f7b56-54a6-475d-87ae-a2fadf62d9b0",
            "d6bb0cd9-141f-40d0-964b-690b24daa4dc",
            "424e3d64-85a0-47b3-b121-cff4174b3b17",
            "968a28e3-8d70-476f-9f5f-8567ce7dbac7",
            "f9ec79fb-c2de-4cef-a855-a663d8ca58d3",
            "3d87a500-f2a1-4e1b-815d-cddf1c64fe50",
            "e9c2e05c-922b-4b05-86bf-7a72562c260e",
            "1b0cd2af-37c4-4e67-9f0b-39e8ba5a3af7",
            "8ba04cff-322d-4c9f-bd79-f1f341ca83cf",
            "7214ec41-80c1-4173-a695-8bfbf8d2d8d4",
            "6c06beb2-7a27-4b67-bb5b-d33bc2806b22",
            "0656bf25-9ba4-4845-b4ae-71d58a0361e4",
            "026183b0-4514-48f2-a539-828c3042aba1",
            "ce0e5d27-d45f-45d3-88da-5a1788682df3",
            "5303ff8c-cab1-4557-8ce4-0b697d14f98b",
            "f719b974-58cd-4d2a-9ad9-daafa4ab567a",
            "91e70622-a49f-4bb9-ace5-9dea4b7e8070",
            "9cf35deb-48c3-40e4-821b-01e8bc93b532",
            "4bb44364-870a-4fb9-b3fb-4d1c13e40e6f",
            "85634f72-e474-421d-bbf5-d8250edb5574",
            "952c221f-dbdb-452a-8077-1a211c3acc1f",
            "0200acb6-4003-4276-8ac7-d7e25790dc34",
            "a91a40c8-8947-4b8d-95a0-52086d35d335",
            "f0a0d2cb-925c-4030-8d2d-22c55678510f",
            "40a92b50-cb91-4585-99ab-9ca33b367d51",
            "cd3fed48-05f8-4485-a46b-61d170383710",
            "fca9d27f-2666-4d79-b7bf-80401794be11",
            "f0cfd84c-9f00-4478-8713-02256563165b",
            "292a7dd4-951c-4f22-8e78-18472c1484e2",
            "71eb363c-1ca7-4b9e-a668-6577f7de88cf",
            "b1543fde-1d83-4d8d-8f7a-5009199166e1",
            "f57b571b-ceec-40e7-b346-5f5e3b035cdd",
            "6336ec54-5148-49c9-8e94-c8e7a2767098",
            "4dbc3dc8-eeb7-4d0d-ad88-4e2122b4648b",
            "8101df7a-474f-41e4-bb16-2efb44cde03a",
            "ecdc0cce-72fb-4ff9-a1d7-385e47749b78",
            "ab48d581-2c57-4eb5-add6-fde7903fa3af",
            "944247ae-36ef-4c2a-93e1-6b84e59635dc",
            "77972161-0965-4ae0-a37d-a25dc932ec1f",
            "f87d826e-4002-4f83-b41f-6864d89e3f65",
            "4e624a19-d098-41b9-9bb3-16ede5c8d787",
            "9fbaf55d-b811-4f30-9945-258193625f3e",
            "9a4369f2-9cca-4d98-9fb7-6372a7500b5a",
            "bdd5e41d-34c9-4803-b51b-0c2cec54dad7",
            "2bf3dc66-c6b8-4e6f-a3fb-379736bc133b",
            "a33783b1-546f-4106-8e83-2a8c66e3a57b",
            "5341ced0-66ba-4cab-8c82-4fe337abc67b",
            "8ae6b052-b957-4419-832f-929780312d3b",
            "b050cb4a-e825-4393-9022-500b7dfa0071",
            "b2918f23-d1f8-439c-9539-b35349717497",
            "30d10a6f-efca-4616-8ea6-cd15ed6e0ef7",
            "9546cfbd-8362-4557-808f-d612088aab6f",
            "3d09b2c6-6877-4c19-be4a-7fc7cd767e5e",
            "3eec4162-2b91-46f1-8638-445ea16a8bda",
            "8816bd72-bc19-49c3-9899-a8eb0e0cd1dc",
            "e4b8ea39-570c-4149-b5f9-e5ee14074a4b",
            "137266c3-97b6-45bf-a0e3-7de8532557d7",
            "1c583814-c156-401a-a049-3f0e838e7285",
            "81e5580f-1c79-4c57-891f-4d12468d9f30",
            "7bb885ae-371e-41c9-b37c-ba7615ff5ac4",
            "b0fc4a65-4325-4022-adea-7bcdb21872ce",
            "7fcc68ae-1db9-489c-a6e9-1501796add2e",
            "514cf6bb-f303-4d68-a3f8-95027e1e7134",
            "0f322a1a-15e4-4a1e-b8ee-49c3fd6b2364",
            "29f2c4b0-23d9-465e-ba6d-92ee866f92f0",
            "c0b9cf5d-c4ae-4266-ba6b-3d83b014c119",
            "5f94162f-8356-4bb7-ac9e-7a467db7f657",
            "f2ab92a2-d4e2-4357-ad01-9d2a116a8b7a",
            "3234c2aa-f182-4235-9dbb-97b668e57c4b",
            "2188c6e9-625d-4cae-945c-6a25befe56ff",
            "62c2a15d-0a0b-4cb6-90a6-6a4741403272",
            "84ed29de-0141-4229-a948-834851e33161",
            "86a68d15-a947-48bb-a264-4f5f679ee061",
            "2808cd3d-c010-43d0-96d9-da5776498790",
            "ab05c1a2-75ad-42f5-8311-90e393f37d97",
            "87301247-b872-49a2-b9b8-49463c8dfba8",
            "dc48db8d-11d0-4f5a-a97b-7e810654d7d2",
            "9efedab6-53d4-4959-b427-0e7e528ef56d",
            "0854f0ef-4cc3-4e5c-b16c-ef06c592bdf7",
            "59bc9f10-6319-4659-a864-9e021f8bfb26",
            "83b5e941-b5e1-40cf-90ef-4c26c450092b",
            "1d335db3-2c28-4548-8cb8-ab7fe4a496ea",
            "30e700fd-053c-4522-86ad-42c1e88d1582",
            "7c60b79e-fd53-43e3-a0f8-e4c980883608",
            "88e3a77f-4b38-4a66-9a0b-284b9cce1f10",
            "30d6fc08-4731-42d2-b315-c4e96c207599",
            "40a77dca-2936-459c-8c8e-ebe0a52c4dfa",
            "8d1c109a-690c-4e01-9cd8-1b3605c73a1f",
            "2d0db4b5-d7aa-43db-b8fb-2d14543a4be1",
            "464dce66-0cbd-42a0-abd6-ace87f16d512",
            "c0c73c0e-ed23-41c3-ac61-ae574929ece8",
            "dc77749d-6e7d-4033-9d2c-d3de7c768be8",
            "8a696d14-9af3-452a-a1b8-aa9f45f59679",
            "c8448836-5cc5-4737-a899-abce86605e5c",
            "ac3bbe0c-b96a-4a02-b29e-d32a3882dc0c",
            "48c1bf00-0b78-4dd6-9ce9-ad77629dff72",
            "61d5d6dc-2c76-43f8-84ad-15cee5c20b71",
            "c92833e0-edd0-480f-a22d-732282ab5e50",
            "b56b8958-ec5b-4715-80d2-be84c17dd47b",
            "e6c6d5a8-45bb-436b-b7fe-ccfae8f8ed00",
            "90336801-2532-430a-93a8-8249a6cdb74f",
            "0ff116ce-2c55-4077-805c-c2ce8088ef1c",
            "b4d71196-a820-4458-a3f7-b80d7e8ec769",
            "28829511-d2d6-44e1-934f-1366bd0293fd",
            "3fc3777b-b0a5-4662-9cf3-f202011e0ef1",
            "8c3065d0-4463-4cd5-a267-f8d74cb2cce0",
            "ae12ec90-6eb2-48da-bd1d-46593b06f4f6",
            "fe156f45-4294-4c10-b6cd-fcb6e3ccd0cf",
            "f9ef6dd1-80d4-4e97-87b4-4a606170d731",
            "59b7c596-31d4-4864-9ab1-c43dd34314ba",
            "49f0e4e9-42cf-40d4-a6f5-ca7d3b45ba28",
            "aeefe7c2-989d-4f07-9993-076b102a1097",
            "051e5d93-e08f-4e7d-b54f-5da33b805d4d",
            "6e70a32f-774a-4f93-b423-56015e5b2fc2",
            "52acf0fd-a4e2-4555-9024-65528eaf6e21",
            "7d3f8dca-2f82-4aa1-8502-bd5fec8817f1",
            "0cf141ff-4eda-4b98-bf55-f66d931124fa",
            "809bf44f-81ba-4055-aab1-3986b3eb3a1a",
            "9ec009ac-9383-4e8b-9e75-8abe29e8b9f6",
            "67e5acc6-7386-4d29-9c18-4d113be5204a",
            "82846c90-1c75-4b97-a2b2-8ce0e054ca0b",
            "ddba570b-206e-4e44-ba88-1198972219a8",
            "f2fdd0e8-849f-42c4-9a0d-985d808dedc3",
            "7ef103bc-65db-44ea-b745-7565860e15af",
            "53862e80-fd95-49d2-9c7e-0980b3c21c0f",
            "fa6ce05e-639f-4c74-9b16-c71fd8f05785",
            "f12ff053-ea98-47c2-8040-dbd969369b10",
            "5bb97bf8-b586-4bdc-bf8f-0ec6ceedb309",
            "59ee411b-895e-4dd9-867e-276f4bc76ce8",
            "f24e8575-ca9b-4598-9705-fae25c17184c",
            "5f4b1fc0-2d2a-4041-828e-1caa46bba90a",
            "db6f19e1-3fd3-45a6-a18e-a3f3183ec078",
            "981c1f7b-4c39-4db8-957a-ca37c820e6ce",
            "7e206366-b6ef-41f2-ab7d-789dac644f79",
            "a5eb400c-7a2f-449f-9f02-a19f0b55821f",
            "f7f6936e-569f-49e3-bbd1-43c6ec204dd1",
            "ac68d0aa-d0e9-495d-9086-a7b3cf4bc5a8",
            "67f3cd65-3f13-43fe-a33a-c5a4e6821f97",
            "25e03457-6d7e-42bf-a70d-815970e12a23",
            "665d355d-036d-49c2-af5e-3b757f5b90fe",
            "827a90a8-8a53-49ef-aa43-ab4badc27848",
            "fd380b01-4b2f-4c64-a36e-2afe8d3cf1dc",
            "54efbe03-cdf9-4b8d-ab33-e6682687457a",
            "ef304299-d60b-47ad-82e3-ca1183aefd0e",
            "f08f57c0-a8dc-4f6e-b860-803c8d1d02e9",
            "576f443f-4f22-43bf-a540-a6333c52efc8",
            "616feadb-6df5-4143-90f3-aec00110a993",
            "65a1d06f-8e9a-4093-9f47-30f30ecbd51e",
            "f8d8498c-ed99-4664-aeca-e94f6a8ae8d6",
            "0775d746-1396-4484-9936-a5465d7ed164",
            "ee96de6a-d077-4d73-b7de-49dc4953ef73",
            "0b804c07-2a14-4e25-aaa5-3f30e2271998",
            "d3dad5db-bda9-499d-b3b3-f0af2ce374b3",
            "142651d4-ac59-45b0-9676-8e31d40c2591",
            "d29f1a8e-fbf8-4bdc-9477-767aadff323a",
            "cac80085-c000-4b5a-a5e0-02acadfae13f",
            "5eb3dfd4-783d-4077-9266-8b96fe5eb6fa",
            "7f872a04-6a46-4439-b806-83894ae17acb",
            "c3a55756-3144-4c5d-9441-f0d4cb7334fe",
            "a327cb60-0478-4e2d-a4de-11ab820cfb5e",
            "fdf1ec73-9974-42dd-9e2e-c159ef119b74",
            "20ab70ce-7117-43d5-a4e8-45e82b35c79b",
            "3177b998-d147-4d12-be11-c2c438944a87",
            "3cfa5f63-e013-4d7d-993d-184009df71e5",
            "4aee1fd2-1397-4f31-886a-726e107dfe7c",
            "f923cd3e-e382-493b-9a8b-6e50d042d8a7",
            "131401c6-2a5f-46a5-a906-b8e1fdc9b6b1",
            "eeb61c18-01bf-47ec-a4f0-678f0fca0cc4",
            "e07239e6-2681-49d3-830c-b9c4c5315411",
            "58f2a34d-23d3-4ab9-a30c-07b39208c050",
            "9f90f550-c2b9-4028-b984-10e7fff119c5",
            "be372b1b-72de-4e5d-a9b9-457a0908e643",
            "8e569341-5f23-4f7b-95d1-d016ea751ec8",
            "16c20cb3-cb8c-4592-b475-872544f402ad",
            "d92ea3dc-b642-41d5-ba36-3322398f37d7",
            "0e6e145a-b974-45ba-8986-ea8fa3501a3d",
            "8604d0e8-ede1-4cf9-9175-0331775bbff7",
            "64a8e00c-7905-457b-ba93-74ec9b96ae61",
            "86377024-0a45-46b0-a756-d123314634a8",
            "b34bd72b-6cd2-4c2d-8b51-b204539fbe76",
            "4e29f8b2-3f29-46b2-aa92-1e8719e529f5",
            "726f6fcc-a65b-47d1-ad11-47690ed57d5e",
            "960cb2db-d8d7-492b-a249-48351969f871",
            "c6362571-7873-49b0-9b08-bcc5cb5938c5",
            "f4e1c467-a83d-4c3a-816d-c78b485c136b",
            "f5b310c5-cdba-45df-8872-cd2bd1088805",
            "bb39f3d8-17a7-4fa2-b960-45b7bcf4ec61",
            "062baeff-8280-405c-b735-f206fe24d575",
            "59f6e020-865a-4e37-bc79-1e1838bf91a7",
            "c6ea3aa4-5284-4193-a694-4a513e6cf2ab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1596282,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}