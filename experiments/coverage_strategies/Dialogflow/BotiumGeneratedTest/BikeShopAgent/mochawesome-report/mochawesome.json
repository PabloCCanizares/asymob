{
  "stats": {
    "suites": 1,
    "tests": 18,
    "passes": 8,
    "pending": 0,
    "failures": 10,
    "start": "2023-10-20T12:38:13.215Z",
    "end": "2023-10-20T12:38:30.598Z",
    "duration": 17383,
    "testsRegistered": 18,
    "passPercent": 44.44444444444444,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "333e64a1-4e7b-42e9-bb7d-3149cd47aebb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e013a719-af79-4adc-9e09-9993e95b921b",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 79,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "528ed012-def0-4c49-a8cb-bab6815ddac8",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 38,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "fa7d320f-ffff-4e80-8084-bee8679ca391",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "dc25ec62-3615-4e5e-b414-da8e8521715a",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "52555702-f990-4142-9ec3-ea51520716fe",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Hours/Hours-L1",
              "fullTitle": "Botium Test-Suite Hours/Hours-L1",
              "timedOut": false,
              "duration": 612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: When do you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "91c2b23f-2b19-4201-92f0-da16dc26bb91",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hours/Hours-L2",
              "fullTitle": "Botium Test-Suite Hours/Hours-L2",
              "timedOut": false,
              "duration": 602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: What are your hours?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b41702c7-7e2f-44b6-b1e1-f194e0531261",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hours/Hours-L3",
              "fullTitle": "Botium Test-Suite Hours/Hours-L3",
              "timedOut": false,
              "duration": 591,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: How late are you open?\\n#bot: We are open every weekday from 9am to 5:30pm\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b6250e2c-c18b-48d3-8480-83664ff094b3",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L1/Make Appointment - custom-L1",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L1/Make Appointment - custom-L1",
              "timedOut": false,
              "duration": 1082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-10-21T12:00:00-07:00, at 2023-10-20T14:00:00-07:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "caa3dc7d-d219-4374-ba9e-749b4e5b5b3e",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L1/Make Appointment - custom-L2",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L1/Make Appointment - custom-L2",
              "timedOut": false,
              "duration": 1088,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I setup an appointment to service my bike tomorrow at 2pm?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-10-21T12:00:00-07:00, at 2023-10-20T14:00:00-07:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f5a19cae-6588-4f58-8fcb-6d49e65618df",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L1",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L1",
              "timedOut": false,
              "duration": 915,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: Can you service my bike?\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Can you fix my road bike?\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Can you fix my road bike?\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "38784d0b-9668-4edc-89ec-3e086b94adc2",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L2",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L2",
              "timedOut": false,
              "duration": 780,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can you fix my road bike?\\n#bot: What day do you want to come in?\\n#me: I need a repair.\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Can you fix my road bike?\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L2/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Can you fix my road bike?\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "02951a03-f9c2-432a-8662-8df961c94ced",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L3/Make Appointment - custom-L1",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L3/Make Appointment - custom-L1",
              "timedOut": false,
              "duration": 1178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: Can you service my bike?\\n#bot: Okay, we’ll schedule a service for tomorrow, 2023-10-21T12:00:00-07:00, at 2023-10-20T16:00:00-07:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ade431f6-174c-4463-b3bf-4457e1941f81",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L3/Make Appointment - custom-L2",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L3/Make Appointment - custom-L2",
              "timedOut": false,
              "duration": 1025,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Can I schedule service for 4pm tomorrow?\\n#bot: Ok, let me see if we can fit you in. Tomorrow at 3pm is fine! Do you need a repair or just a tune-up?\\n#me: I need a repair.\\n#bot: Okay, we’ll schedule a fix for tomorrow, 2023-10-21T12:00:00-07:00, at 2023-10-20T16:00:00-07:00.  We’ll see you then.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "56ab7bc0-6d15-47b1-a0c0-90e2811e9bdb",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L1",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L1",
              "timedOut": false,
              "duration": 1177,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: Can you service my bike?\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: My bike is broken\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: My bike is broken\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9f78ebb3-6692-4a82-be76-8a7657a69443",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L2",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L2",
              "timedOut": false,
              "duration": 1025,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: My bike is broken\\n#bot: What day do you want to come in?\\n#me: I need a repair.\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: My bike is broken\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L4/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: My bike is broken\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d97b4af9-4f06-4f23-98ca-d6bd7070f64a",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L1",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L1",
              "timedOut": false,
              "duration": 1060,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: Can you service my bike?\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I have a mountain bike that needs servicing\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I have a mountain bike that needs servicing\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "df3207c8-2184-458c-af2b-cc7eea293bcd",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L2",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L2",
              "timedOut": false,
              "duration": 1006,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I have a mountain bike that needs servicing\\n#bot: What day do you want to come in?\\n#me: I need a repair.\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I have a mountain bike that needs servicing\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L5/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I have a mountain bike that needs servicing\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a1a3dfcf-e424-4e34-9a9a-5b87b68035da",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L1",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L1",
              "timedOut": false,
              "duration": 821,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: Can you service my bike?\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to get my bike fixed\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to get my bike fixed\r\n#bot: What day do you want to come in?\r\n#me: Can you service my bike?\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "54c22aa5-23c4-4db4-9465-03d6d86372b7",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L2",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L2",
              "timedOut": false,
              "duration": 1060,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to get my bike fixed\\n#bot: What day do you want to come in?\\n#me: I need a repair.\\n#bot: What day do you want to come in?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to get my bike fixed\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L6/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to get my bike fixed\r\n#bot: What day do you want to come in?\r\n#me: I need a repair.\r\n#bot: What day do you want to come in?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "21783d9e-4ac8-4d33-b8a7-823c6fcbc263",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L1",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L1",
              "timedOut": false,
              "duration": 993,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: Can you service my bike?\\n#bot: What time works for you?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to schedule an appointment for next Thursday\r\n#bot: What time works for you?\r\n#me: Can you service my bike?\r\n#bot: What time works for you?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L1/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: Can you service my bike?\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to schedule an appointment for next Thursday\r\n#bot: What time works for you?\r\n#me: Can you service my bike?\r\n#bot: What time works for you?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7e389a18-be94-415b-81dd-24b762ff4e0b",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L2",
              "fullTitle": "Botium Test-Suite Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L2",
              "timedOut": false,
              "duration": 927,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I'd like to schedule an appointment for next Thursday\\n#bot: What time works for you?\\n#me: I need a repair.\\n#bot: What time works for you?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to schedule an appointment for next Thursday\r\n#bot: What time works for you?\r\n#me: I need a repair.\r\n#bot: What time works for you?",
                "estack": "Error: Make Appointment - Make Appointment - custom/Make Appointment-L7/Make Appointment - custom-L2/Line 12: assertion error - Line 12: Expected intent \"Make Appointment - custom\" but found Make Appointment\r\n########################################\r\nASSERTION FAILED in IntentAsserter - Expected: \"Make Appointment - custom\"  - Actual: \"Make Appointment\"\r\nINPUT: I need a repair.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: I'd like to schedule an appointment for next Thursday\r\n#bot: What time works for you?\r\n#me: I need a repair.\r\n#bot: What time works for you?\n    at wrapBotiumError (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Kvothe\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "312d153a-9464-472f-a5eb-11662a51aacd",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Welcome Intent/Welcome Intent-L1",
              "fullTitle": "Botium Test-Suite Welcome Intent/Welcome Intent-L1",
              "timedOut": false,
              "duration": 707,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: Hi, welcome to Hogarth's bike shop.  How can I help you?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e75928e5-6c09-436e-b6f9-b3ada18f3ca4",
              "parentUUID": "e013a719-af79-4adc-9e09-9993e95b921b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91c2b23f-2b19-4201-92f0-da16dc26bb91",
            "b41702c7-7e2f-44b6-b1e1-f194e0531261",
            "b6250e2c-c18b-48d3-8480-83664ff094b3",
            "caa3dc7d-d219-4374-ba9e-749b4e5b5b3e",
            "f5a19cae-6588-4f58-8fcb-6d49e65618df",
            "ade431f6-174c-4463-b3bf-4457e1941f81",
            "56ab7bc0-6d15-47b1-a0c0-90e2811e9bdb",
            "e75928e5-6c09-436e-b6f9-b3ada18f3ca4"
          ],
          "failures": [
            "38784d0b-9668-4edc-89ec-3e086b94adc2",
            "02951a03-f9c2-432a-8662-8df961c94ced",
            "9f78ebb3-6692-4a82-be76-8a7657a69443",
            "d97b4af9-4f06-4f23-98ca-d6bd7070f64a",
            "df3207c8-2184-458c-af2b-cc7eea293bcd",
            "a1a3dfcf-e424-4e34-9a9a-5b87b68035da",
            "54c22aa5-23c4-4db4-9465-03d6d86372b7",
            "21783d9e-4ac8-4d33-b8a7-823c6fcbc263",
            "7e389a18-be94-415b-81dd-24b762ff4e0b",
            "312d153a-9464-472f-a5eb-11662a51aacd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16649,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}