{
  "stats": {
    "suites": 1,
    "tests": 107,
    "passes": 107,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-15T22:46:03.202Z",
    "end": "2023-11-15T22:51:48.964Z",
    "duration": 345762,
    "testsRegistered": 107,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2c2a99a3-ab24-4c03-9c06-7f323462ea07",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "67c116f2-2eba-4c61-9490-b710ce2105c6",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "bb348398-b6ea-4900-9c0e-f9ac30715ff3",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "eda4fe7c-2d50-4616-b4f9-4f7da2ae9854",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "268960c1-bcb7-471a-8af6-1ee523ec07e3",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "b5434c42-7f13-43a0-bac7-586ed9126ca0",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L01/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L01/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: just going to say hi\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "dedf0148-4b94-4ff8-a636-274b1caaa651",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L01/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L01/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1751,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: just going to say hi\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e84acf41-86c5-4c69-ae00-ac93163ac124",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L02/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L02/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: heya\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ef6ea14a-d41c-449a-9335-62dcf38668fe",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L02/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L02/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1472,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: heya\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "07fcb27a-6a68-4ee7-9947-a1ebcb8ab726",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L03/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L03/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1701,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello hi\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5a67a1b0-0cac-4ae9-92c0-53fbd35a2c45",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L03/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L03/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello hi\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f343a69e-be20-4205-a126-7617b6ae247b",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L04/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L04/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1985,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: howdy\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e7d3c919-b5bf-4f9a-b702-63260d6e32d3",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L04/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L04/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1965,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: howdy\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b7bd9cca-1d74-4f1d-abc9-df5a8b614d86",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L05/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L05/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 2185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "56e9457f-06a5-4dde-be05-65b27f16d60d",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L05/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L05/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1971,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0def7151-85fb-43fc-a1ef-0ca4b1c61041",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L06/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L06/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1746,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi there\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "addd8ad7-b144-4fa9-bb67-41fd57790f26",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L06/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L06/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi there\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8e1b6924-71ca-400e-93ba-c5d95dd0ea64",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L07/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L07/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: greetings\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "628f1fcc-7bba-4253-9931-9e2a431c7c4a",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L07/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L07/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1785,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: greetings\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3935f0be-28d0-48c3-b4ac-ae6a3150462c",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L08/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L08/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1977,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "21f63f43-c73a-4b10-8b50-d758497cffcb",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L08/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L08/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d513775c-75c6-493c-8008-ed42269c40b1",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L09/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L09/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: long time no see\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "619f0670-b537-43e8-9a1b-c8daad61f133",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L09/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L09/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1971,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: long time no see\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cbe9ef62-f757-4603-8fc6-575e3de57f57",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L10/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L10/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ab7c2973-538c-41eb-8e6a-4b8938c30f29",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L10/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L10/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "884c2b1b-4484-499c-95b2-484754370e70",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L11/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L11/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1782,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: lovely day isn't it\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c3d9b12e-2f3f-4e4e-85cc-0cf6230e6f68",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L11/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L11/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1636,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: lovely day isn't it\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f3592592-1791-4fa9-b886-a65feaa5db1c",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L12/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L12/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1760,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I greet you\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5d42de46-4bd7-417f-862c-9aaad5238bff",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L12/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L12/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 2032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: I greet you\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00f6bded-ab1e-4368-8c18-a1225dd52499",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L13/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L13/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1659,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello again\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "443eb806-786f-4d7c-8a65-1916f348b399",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L13/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L13/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello again\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "28da4b23-150c-4983-a005-26c872ca127c",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L14/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L14/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4891625a-9bf2-4833-9033-3db4d4d5aa2a",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L14/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L14/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1834,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f5f34256-de8e-4eb7-9a52-af9cae4650b9",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L15/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L15/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 1278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello there\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cfe7542c-348f-4086-929e-3fd3af2edaff",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L15/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L15/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1812,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello there\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2050ba88-8778-4363-b74d-e29465483674",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L16/INSURANCE_-_YES_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L16/INSURANCE_-_YES_USER-L1",
              "timedOut": false,
              "duration": 2091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: a good day\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: Insurance policies we provide\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a4add719-adbb-4f8e-b0ce-12788d082a37",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L16/INSURANCE_-_YES_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Default_Welcome_Intent-!Insurance_-_YES-convo/DEFAULT_WELCOME_INTENT_USER-L16/INSURANCE_-_YES_USER-L2",
              "timedOut": false,
              "duration": 1951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: a good day\\n#bot: Hey👋 Thank you for showing interest in our insurance 😍\\n#me: What insurance policies do you have?\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d94237ff-89cd-462c-a335-e11dd61fdee1",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "timedOut": false,
              "duration": 2325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: Housing Society\\n#bot: Your housing society is home to hundreds of family members.\\n \\n🏠 We provide complete protection against multiple factors to keep your society safe and secure.\\n\\n✔️ Stay protected for a year\\n✔️ Covers common amenities\\n✔️ Bigger properties higher coverage\\n✔️ Big discounts\\n\\nThis is a custom plan. For registration and more details, please go here 👇🏻\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "c9b80a04-6143-4bc1-8434-be675363a0aa",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "timedOut": false,
              "duration": 1930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: Housing Society\\n#bot: Your housing society is home to hundreds of family members.\\n \\n🏠 We provide complete protection against multiple factors to keep your society safe and secure.\\n\\n✔️ Stay protected for a year\\n✔️ Covers common amenities\\n✔️ Bigger properties higher coverage\\n✔️ Big discounts\\n\\nThis is a custom plan. For registration and more details, please go here 👇🏻\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "62babe47-4d84-4f9f-9974-88f6053ad55e",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "timedOut": false,
              "duration": 2282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: Housing Society\\n#bot: Your housing society is home to hundreds of family members.\\n \\n🏠 We provide complete protection against multiple factors to keep your society safe and secure.\\n\\n✔️ Stay protected for a year\\n✔️ Covers common amenities\\n✔️ Bigger properties higher coverage\\n✔️ Big discounts\\n\\nThis is a custom plan. For registration and more details, please go here 👇🏻\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d29166d5-3cbe-465f-88aa-79cfd0dbfe70",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "timedOut": false,
              "duration": 2059,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: Housing Society\\n#bot: Your housing society is home to hundreds of family members.\\n \\n🏠 We provide complete protection against multiple factors to keep your society safe and secure.\\n\\n✔️ Stay protected for a year\\n✔️ Covers common amenities\\n✔️ Bigger properties higher coverage\\n✔️ Big discounts\\n\\nThis is a custom plan. For registration and more details, please go here 👇🏻\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5135cd69-1d1c-4ba4-8f78-604a5ffe3823",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Housing_Society-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_HOUSING_SOCIETY_USER-L1",
              "timedOut": false,
              "duration": 3158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: Housing Society\\n#bot: Your housing society is home to hundreds of family members.\\n \\n🏠 We provide complete protection against multiple factors to keep your society safe and secure.\\n\\n✔️ Stay protected for a year\\n✔️ Covers common amenities\\n✔️ Bigger properties higher coverage\\n✔️ Big discounts\\n\\nThis is a custom plan. For registration and more details, please go here 👇🏻\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a93e61d5-55b8-4315-ae94-b5628c389032",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 5650,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "579999e0-2589-4d1b-a4a8-3296a317cdc1",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 4951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "08b7a018-8e12-4753-ad14-ae56f6649e1a",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 5250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8de4335c-bfcb-498c-bc72-4aa7804f448c",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 6434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "24ad6ee1-84d2-40d7-a003-7393e5ca0479",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_000-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 5246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0d2f6bc5-27c5-4af9-ac55-941d5cd3d928",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 4092,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "786a8e40-e448-4787-89ca-f0d0504de429",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 3866,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d846a9a9-b807-4800-aa54-73f8619e9dc2",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 4243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4d3be99b-2e6b-4e82-86bd-5efb249951d9",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 4521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cf46060a-7b2a-446b-9378-198c4730cee5",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_011-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 3930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bd68011e-ec3a-4485-b1bf-158e6dd5ab87",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "faac9371-afb8-444f-8737-292d1f40330b",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4913,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3539416f-406d-4ac0-b8e4-16d2282cc476",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "03dbad32-bcc5-45e0-b4ce-c6ee9e34bdb5",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "e2100ee8-3ae8-44aa-94fc-365a46fa03cf",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 5262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0df30232-0f06-4a05-a64e-6315c558fc8f",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3471,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4ddefd7b-aeba-4ee1-bc12-ea3c8cfcb21d",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1c3555d0-7f1b-462e-8dd3-aa0b42904622",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c0b9a37-b7f9-450d-b3b6-1f4ea23103bd",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 4502,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "16695149-51e1-4816-bded-0e7e618279e2",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Owners_-_Yes_110-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_OWNERS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3585,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7655545321\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a86e37b2-102e-43c8-a309-fcc5e614ec47",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 3518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "19983b9f-887e-4498-8f5d-490945b75406",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ff8955c0-1078-43ab-8f90-4d369fec750d",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 3280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "01e70bab-8e98-4cae-8cd9-0f224d1eba8e",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "46623bd4-7313-47fa-a8fd-0625f736816d",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 3656,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "42a12979-577b-4911-a113-4b03f78fac87",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7bb70e72-624e-4586-910d-c7ac0888e06e",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 2593,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bfdfc3c1-f8d2-4648-8346-5d1d0ea51b7d",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 2898,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "80db6b30-a720-48f0-a644-a5f1413f341e",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 3033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d062b247-e9e0-4989-8eaa-6febfd2ddce2",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Owners-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_OWNERS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Owners\\n#bot: Your 🏠home is your soul. Protect it!\\n\\n✔️Covers losses and damages to an individual's house and to assets in the house\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "1a963652-43f3-45a3-872b-618409b23ef3",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 3537,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9309edf5-2fdf-4ba2-ab7d-003a247c0322",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 2908,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "64093dbc-bd38-4f87-ac76-9dd76886f3d9",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 2847,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "70609d6b-59e8-4560-b96b-6e686fe116f9",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ab4b41f4-b03c-401e-91d6-86f3d79f40fc",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 2807,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0117723a-ae7e-47f8-a7c5-5bb1910a7039",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3520,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6612357e-cb7d-41f7-b2bd-b04c49607735",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 2912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9fa4e948-b509-4252-968f-abfda7dd7e21",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3575,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "829726e7-d919-4dca-9350-ca511bc20ace",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L1",
              "timedOut": false,
              "duration": 3236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Not looking for this plan\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "8a10f2ed-b37c-420f-bac5-2788c31b63cc",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_No-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_NO_USER-L2",
              "timedOut": false,
              "duration": 3138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: No\\n#bot: Cool 🙂 You can explore the other plans 👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "38971559-6f2e-45e9-a2d8-b6ade5998c51",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 4583,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Please provide us with some details\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "afa0c700-a054-429b-888f-0dd06c388b26",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "timedOut": false,
              "duration": 5799,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7dfc4309-eda1-4d52-8f45-f61c2c21a936",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 5571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Please provide us with some details\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ca8ce655-9e6a-4063-8c02-195e989a063e",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "timedOut": false,
              "duration": 5409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "55d41f64-fea3-43ad-b5d0-6d3dca794eb2",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 5078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Please provide us with some details\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4d50c39b-27db-485a-be97-b311c60a8c02",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "timedOut": false,
              "duration": 4545,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "454b11bb-f255-4881-bdec-d1bd40fda873",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 5911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Please provide us with some details\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "555864b0-4479-4137-b856-0003fea1f156",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "timedOut": false,
              "duration": 5507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "19bba533-807d-44d0-8635-38ec116ac832",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L1",
              "timedOut": false,
              "duration": 5119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Please provide us with some details\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a2c5671e-038e-47dc-be8e-ea31fd6ac49a",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_000-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_000_USER-L2",
              "timedOut": false,
              "duration": 4694,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: Yes\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "56d56e21-5651-4b8b-8d18-8548d337074c",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 4185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fef58a5a-78e1-461b-a739-a376c988ba80",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 4133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "473b93ed-d9ba-4cfe-9ee4-10ddb1d6da9e",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 3879,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b54fa472-d3e4-4fd1-9e18-1e800bb9c6ff",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 4013,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "04dae214-9fef-45ba-a847-a9815a5d5fc8",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_011-2-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_011_USER-L1",
              "timedOut": false,
              "duration": 4138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my email is alex@gmail.com and phone number is 7655545321\\n#bot: Got it, To get things ✔️started. Please let us know your name😊\\n#me: alex\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6a2e8145-d357-418d-8cbb-68ded7b6ed3a",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "84d43a2d-566c-4c7d-8e98-9699ed246ca7",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9de94fea-0741-4603-a014-a81efe250c12",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0a6cbd61-01e7-4e41-b1f3-5540245a8655",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b3050cdf-48f2-4a03-a67f-74591f6c059c",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_100-3-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_100_USER-L1",
              "timedOut": false,
              "duration": 4388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex\\n#bot: Thanks Alex😍, Please provide us with your email address📧 & mobile number📱 to get in touch with you later.\\n#me: alex@kommunicate.io\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7904f090-5758-4146-9b9a-6b6bff50acb0",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L1/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: ok\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "12d8d4a1-364d-43aa-b53d-31bdb10e4cb7",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L2/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 4103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: sure\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00d3fbe9-89a6-48de-bf2b-fc0bcfcddf69",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L3/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3669,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: okay\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9855815a-3814-46d8-9ea9-be1f77a64271",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L4/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Home Insurance - Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a78bdff4-42ba-44b8-a07c-0f88f28212a3",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Home_Insurance-!Home_Insurance_-_Plan_Details-!Home_Insurance_-_Tenants-!Home_Insurance_-_Tenants_-_Yes_110-1-convo/HOME_INSURANCE_USER-L1/HOME_INSURANCE_-_PLAN_DETAILS_USER-L5/HOME_INSURANCE_-_TENANTS_USER-L1/HOME_INSURANCE_-_TENANTS_-_YES_110_USER-L1",
              "timedOut": false,
              "duration": 3868,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Home Insurance\\n#bot: 🏠Home insurance covers the structure of house and the contents which include prized possessions against damage from natural calamities like floods, earthquake, storm and man made events like riots, arson etc.\\n#bot: ⭐Benefits and Features of 🏠Home Insurance\\n✔️Complete coverage for any damage to your home or it's contents from natural calamities and man made events\\n\\n✔️Benefits like round the clock customer service, immediate access to the insurance experts and quick customer service.\\n#me: Plan Details\\n#bot: Choose any of the Home insurance plan 👇🏼\\n#me: For Tenants\\n#bot: Even though you are at the rented place. The sweet memories, important occasions are still to be cherished 🌼\\n#me: my name is alex and email is alex@gmail.com\\n#bot: What is the phone-number?\\n#me: 7645576532\\n#bot: Thank you Alex 😃 for choosing the plan. \\n\\nOne of our representatives will reach out to you as soon as possible and help you with further steps in the policy👍\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "40767587-9d91-4b58-9399-ede585d2ee1b",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Life_Insurance-!Life_Insurance_-_Plan_details-!Life_Insurance_-_Critical_Illness_benefit-convo/LIFE_INSURANCE_USER-L1/LIFE_INSURANCE_-_PLAN_DETAILS_USER-L1/LIFE_INSURANCE_-_CRITICAL_ILLNESS_BENEFIT_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Life_Insurance-!Life_Insurance_-_Plan_details-!Life_Insurance_-_Critical_Illness_benefit-convo/LIFE_INSURANCE_USER-L1/LIFE_INSURANCE_-_PLAN_DETAILS_USER-L1/LIFE_INSURANCE_-_CRITICAL_ILLNESS_BENEFIT_USER-L1",
              "timedOut": false,
              "duration": 2526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Life Insurance\\n#bot: ✔️Who needs it: Those with dependents\\n\\n✔️What it is: \\n- In the event of death, a life insurance policy pays a beneficiary an agreed-upon amount of money to cover the expenses left by the deceased\\n\\n- A beneficiary is a person or entity named in a policy who receives benefits, such as a spouse\\n#me: Life Insurance - Plan details\\n#bot: ✔️Premium: Rs. 1000 paid annually\\n✔️Premium Payment Term: 6 Years (Regular)\\n✔️Sum Assured: Rs 2,50,000\\n✔️Plan Option: Daily hospital cash, surgical & critical illness\\n#bot:\\n#me: Critical illness benefit\\n#bot: ✔️Critical Illness Insurance provides coverage against specific life threatening diseases\\n\\n✔️Treating such critical illnesses may require multiple visits to the hospital over a long period of time\\n\\n✔️In addition to the hospitalization cost, there will be other costs like doctor visits, medical expenses, etc\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4aabe5b6-d84b-4e14-a1a0-2274284751dd",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Life_Insurance-!Life_Insurance_-_Plan_details-!Life_Insurance_-_Daily_Hospital_Benefit-convo/LIFE_INSURANCE_USER-L1/LIFE_INSURANCE_-_PLAN_DETAILS_USER-L1/LIFE_INSURANCE_-_DAILY_HOSPITAL_BENEFIT_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Life_Insurance-!Life_Insurance_-_Plan_details-!Life_Insurance_-_Daily_Hospital_Benefit-convo/LIFE_INSURANCE_USER-L1/LIFE_INSURANCE_-_PLAN_DETAILS_USER-L1/LIFE_INSURANCE_-_DAILY_HOSPITAL_BENEFIT_USER-L1",
              "timedOut": false,
              "duration": 2898,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Life Insurance\\n#bot: ✔️Who needs it: Those with dependents\\n\\n✔️What it is: \\n- In the event of death, a life insurance policy pays a beneficiary an agreed-upon amount of money to cover the expenses left by the deceased\\n\\n- A beneficiary is a person or entity named in a policy who receives benefits, such as a spouse\\n#me: Life Insurance - Plan details\\n#bot: ✔️Premium: Rs. 1000 paid annually\\n✔️Premium Payment Term: 6 Years (Regular)\\n✔️Sum Assured: Rs 2,50,000\\n✔️Plan Option: Daily hospital cash, surgical & critical illness\\n#bot:\\n#me: Daily Hospital Benefit\\n#bot: ✔️Daily hospital benefit provides a sum amount daily in case of hospitalization and this amount can be used per the insured’s need\\n\\n✔️The money can be used for meeting additional expenses that are not covered by health insurance or for even compensating the loss of income during the period of hospitalization\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a78ca43a-4af4-456c-93ad-213aff6db6b7",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Life_Insurance-!Life_Insurance_-_Plan_details-!Life_Insurance_-_Surgical_Benefit-convo/LIFE_INSURANCE_USER-L1/LIFE_INSURANCE_-_PLAN_DETAILS_USER-L1/LIFE_INSURANCE_-_SURGICAL_BENEFIT_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Life_Insurance-!Life_Insurance_-_Plan_details-!Life_Insurance_-_Surgical_Benefit-convo/LIFE_INSURANCE_USER-L1/LIFE_INSURANCE_-_PLAN_DETAILS_USER-L1/LIFE_INSURANCE_-_SURGICAL_BENEFIT_USER-L1",
              "timedOut": false,
              "duration": 2215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Life Insurance\\n#bot: ✔️Who needs it: Those with dependents\\n\\n✔️What it is: \\n- In the event of death, a life insurance policy pays a beneficiary an agreed-upon amount of money to cover the expenses left by the deceased\\n\\n- A beneficiary is a person or entity named in a policy who receives benefits, such as a spouse\\n#me: Life Insurance - Plan details\\n#bot: ✔️Premium: Rs. 1000 paid annually\\n✔️Premium Payment Term: 6 Years (Regular)\\n✔️Sum Assured: Rs 2,50,000\\n✔️Plan Option: Daily hospital cash, surgical & critical illness\\n#bot:\\n#me: Surgical Benefit\\n#bot: ✔️Illness or accidental injuries resulting in the hospitalization can bring in some serious financial problems for any family\\n \\n✔️To provide you with financial assistance in such circumstances we provide Surgical Protection Insurance\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "73c56a87-06ba-4e2f-93b0-b7a2a06638e5",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Main_Menu-convo/MAIN_MENU_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Main_Menu-convo/MAIN_MENU_USER-L1",
              "timedOut": false,
              "duration": 954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Main Menu\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "81e807fb-3dec-48fa-a91b-4ed0d8b305c2",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-Vehicle_Insurance-!Vehicle_Insurance_-_Plan_Details-convo/VEHICLE_INSURANCE_USER-L1/VEHICLE_INSURANCE_-_PLAN_DETAILS_USER-L1",
              "fullTitle": "Botium Test-Suite TC-Vehicle_Insurance-!Vehicle_Insurance_-_Plan_Details-convo/VEHICLE_INSURANCE_USER-L1/VEHICLE_INSURANCE_-_PLAN_DETAILS_USER-L1",
              "timedOut": false,
              "duration": 1483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Vehicle Insurance\\n#bot: Motor insurance policy covers the policyholder in case of financial losses, resulting from an accident or other damages sustained by the insured vehicle. \\n\\nWhat's included?\\n✔️ Accidents, Personal Accident Cover\\n✔️ Fire & Explosion\\n✔️ Theft\\n✔️ Calamities\\n\\nWhat’s not included?\\n✔️ Depreciation\\n✔️ Electrical & Mechanical Breakdown\\n✔️ Illegal Driving\\n#me: Vehicle Insurance - Plan Details\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "613d9cc4-9140-45ce-a124-96b1d86052ba",
              "parentUUID": "67c116f2-2eba-4c61-9490-b710ce2105c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dedf0148-4b94-4ff8-a636-274b1caaa651",
            "e84acf41-86c5-4c69-ae00-ac93163ac124",
            "ef6ea14a-d41c-449a-9335-62dcf38668fe",
            "07fcb27a-6a68-4ee7-9947-a1ebcb8ab726",
            "5a67a1b0-0cac-4ae9-92c0-53fbd35a2c45",
            "f343a69e-be20-4205-a126-7617b6ae247b",
            "e7d3c919-b5bf-4f9a-b702-63260d6e32d3",
            "b7bd9cca-1d74-4f1d-abc9-df5a8b614d86",
            "56e9457f-06a5-4dde-be05-65b27f16d60d",
            "0def7151-85fb-43fc-a1ef-0ca4b1c61041",
            "addd8ad7-b144-4fa9-bb67-41fd57790f26",
            "8e1b6924-71ca-400e-93ba-c5d95dd0ea64",
            "628f1fcc-7bba-4253-9931-9e2a431c7c4a",
            "3935f0be-28d0-48c3-b4ac-ae6a3150462c",
            "21f63f43-c73a-4b10-8b50-d758497cffcb",
            "d513775c-75c6-493c-8008-ed42269c40b1",
            "619f0670-b537-43e8-9a1b-c8daad61f133",
            "cbe9ef62-f757-4603-8fc6-575e3de57f57",
            "ab7c2973-538c-41eb-8e6a-4b8938c30f29",
            "884c2b1b-4484-499c-95b2-484754370e70",
            "c3d9b12e-2f3f-4e4e-85cc-0cf6230e6f68",
            "f3592592-1791-4fa9-b886-a65feaa5db1c",
            "5d42de46-4bd7-417f-862c-9aaad5238bff",
            "00f6bded-ab1e-4368-8c18-a1225dd52499",
            "443eb806-786f-4d7c-8a65-1916f348b399",
            "28da4b23-150c-4983-a005-26c872ca127c",
            "4891625a-9bf2-4833-9033-3db4d4d5aa2a",
            "f5f34256-de8e-4eb7-9a52-af9cae4650b9",
            "cfe7542c-348f-4086-929e-3fd3af2edaff",
            "2050ba88-8778-4363-b74d-e29465483674",
            "a4add719-adbb-4f8e-b0ce-12788d082a37",
            "d94237ff-89cd-462c-a335-e11dd61fdee1",
            "c9b80a04-6143-4bc1-8434-be675363a0aa",
            "62babe47-4d84-4f9f-9974-88f6053ad55e",
            "d29166d5-3cbe-465f-88aa-79cfd0dbfe70",
            "5135cd69-1d1c-4ba4-8f78-604a5ffe3823",
            "a93e61d5-55b8-4315-ae94-b5628c389032",
            "579999e0-2589-4d1b-a4a8-3296a317cdc1",
            "08b7a018-8e12-4753-ad14-ae56f6649e1a",
            "8de4335c-bfcb-498c-bc72-4aa7804f448c",
            "24ad6ee1-84d2-40d7-a003-7393e5ca0479",
            "0d2f6bc5-27c5-4af9-ac55-941d5cd3d928",
            "786a8e40-e448-4787-89ca-f0d0504de429",
            "d846a9a9-b807-4800-aa54-73f8619e9dc2",
            "4d3be99b-2e6b-4e82-86bd-5efb249951d9",
            "cf46060a-7b2a-446b-9378-198c4730cee5",
            "bd68011e-ec3a-4485-b1bf-158e6dd5ab87",
            "faac9371-afb8-444f-8737-292d1f40330b",
            "3539416f-406d-4ac0-b8e4-16d2282cc476",
            "03dbad32-bcc5-45e0-b4ce-c6ee9e34bdb5",
            "e2100ee8-3ae8-44aa-94fc-365a46fa03cf",
            "0df30232-0f06-4a05-a64e-6315c558fc8f",
            "4ddefd7b-aeba-4ee1-bc12-ea3c8cfcb21d",
            "1c3555d0-7f1b-462e-8dd3-aa0b42904622",
            "7c0b9a37-b7f9-450d-b3b6-1f4ea23103bd",
            "16695149-51e1-4816-bded-0e7e618279e2",
            "a86e37b2-102e-43c8-a309-fcc5e614ec47",
            "19983b9f-887e-4498-8f5d-490945b75406",
            "ff8955c0-1078-43ab-8f90-4d369fec750d",
            "01e70bab-8e98-4cae-8cd9-0f224d1eba8e",
            "46623bd4-7313-47fa-a8fd-0625f736816d",
            "42a12979-577b-4911-a113-4b03f78fac87",
            "7bb70e72-624e-4586-910d-c7ac0888e06e",
            "bfdfc3c1-f8d2-4648-8346-5d1d0ea51b7d",
            "80db6b30-a720-48f0-a644-a5f1413f341e",
            "d062b247-e9e0-4989-8eaa-6febfd2ddce2",
            "1a963652-43f3-45a3-872b-618409b23ef3",
            "9309edf5-2fdf-4ba2-ab7d-003a247c0322",
            "64093dbc-bd38-4f87-ac76-9dd76886f3d9",
            "70609d6b-59e8-4560-b96b-6e686fe116f9",
            "ab4b41f4-b03c-401e-91d6-86f3d79f40fc",
            "0117723a-ae7e-47f8-a7c5-5bb1910a7039",
            "6612357e-cb7d-41f7-b2bd-b04c49607735",
            "9fa4e948-b509-4252-968f-abfda7dd7e21",
            "829726e7-d919-4dca-9350-ca511bc20ace",
            "8a10f2ed-b37c-420f-bac5-2788c31b63cc",
            "38971559-6f2e-45e9-a2d8-b6ade5998c51",
            "afa0c700-a054-429b-888f-0dd06c388b26",
            "7dfc4309-eda1-4d52-8f45-f61c2c21a936",
            "ca8ce655-9e6a-4063-8c02-195e989a063e",
            "55d41f64-fea3-43ad-b5d0-6d3dca794eb2",
            "4d50c39b-27db-485a-be97-b311c60a8c02",
            "454b11bb-f255-4881-bdec-d1bd40fda873",
            "555864b0-4479-4137-b856-0003fea1f156",
            "19bba533-807d-44d0-8635-38ec116ac832",
            "a2c5671e-038e-47dc-be8e-ea31fd6ac49a",
            "56d56e21-5651-4b8b-8d18-8548d337074c",
            "fef58a5a-78e1-461b-a739-a376c988ba80",
            "473b93ed-d9ba-4cfe-9ee4-10ddb1d6da9e",
            "b54fa472-d3e4-4fd1-9e18-1e800bb9c6ff",
            "04dae214-9fef-45ba-a847-a9815a5d5fc8",
            "6a2e8145-d357-418d-8cbb-68ded7b6ed3a",
            "84d43a2d-566c-4c7d-8e98-9699ed246ca7",
            "9de94fea-0741-4603-a014-a81efe250c12",
            "0a6cbd61-01e7-4e41-b1f3-5540245a8655",
            "b3050cdf-48f2-4a03-a67f-74591f6c059c",
            "7904f090-5758-4146-9b9a-6b6bff50acb0",
            "12d8d4a1-364d-43aa-b53d-31bdb10e4cb7",
            "00d3fbe9-89a6-48de-bf2b-fc0bcfcddf69",
            "9855815a-3814-46d8-9ea9-be1f77a64271",
            "a78bdff4-42ba-44b8-a07c-0f88f28212a3",
            "40767587-9d91-4b58-9399-ede585d2ee1b",
            "4aabe5b6-d84b-4e14-a1a0-2274284751dd",
            "a78ca43a-4af4-456c-93ad-213aff6db6b7",
            "73c56a87-06ba-4e2f-93b0-b7a2a06638e5",
            "81e807fb-3dec-48fa-a91b-4ed0d8b305c2",
            "613d9cc4-9140-45ce-a124-96b1d86052ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 344535,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}